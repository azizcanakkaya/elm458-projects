
RemoteKeylessSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08001c8c  08001c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e98  08001e98  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001e98  08001e98  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e98  08001e98  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000014  08001eb4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001eb4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c4e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000673  00000000  00000000  00022c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a0  00000000  00000000  00023300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000234a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018fcd  00000000  00000000  00023608  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001ca5  00000000  00000000  0003c5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089d44  00000000  00000000  0003e27a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7fbe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005e8  00000000  00000000  000c803c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000014 	.word	0x20000014
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001c74 	.word	0x08001c74

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000018 	.word	0x20000018
 80001e4:	08001c74 	.word	0x08001c74

080001e8 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b089      	sub	sp, #36	; 0x24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80001f2:	2300      	movs	r3, #0
 80001f4:	61fb      	str	r3, [r7, #28]
 80001f6:	e030      	b.n	800025a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80001f8:	69fb      	ldr	r3, [r7, #28]
 80001fa:	009b      	lsls	r3, r3, #2
 80001fc:	683a      	ldr	r2, [r7, #0]
 80001fe:	441a      	add	r2, r3
 8000200:	69fb      	ldr	r3, [r7, #28]
 8000202:	009b      	lsls	r3, r3, #2
 8000204:	6879      	ldr	r1, [r7, #4]
 8000206:	440b      	add	r3, r1
 8000208:	7812      	ldrb	r2, [r2, #0]
 800020a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800020c:	69fb      	ldr	r3, [r7, #28]
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	3301      	adds	r3, #1
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	441a      	add	r2, r3
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	009b      	lsls	r3, r3, #2
 800021a:	3301      	adds	r3, #1
 800021c:	6879      	ldr	r1, [r7, #4]
 800021e:	440b      	add	r3, r1
 8000220:	7812      	ldrb	r2, [r2, #0]
 8000222:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000224:	69fb      	ldr	r3, [r7, #28]
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	3302      	adds	r3, #2
 800022a:	683a      	ldr	r2, [r7, #0]
 800022c:	441a      	add	r2, r3
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	009b      	lsls	r3, r3, #2
 8000232:	3302      	adds	r3, #2
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	440b      	add	r3, r1
 8000238:	7812      	ldrb	r2, [r2, #0]
 800023a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	3303      	adds	r3, #3
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	441a      	add	r2, r3
 8000246:	69fb      	ldr	r3, [r7, #28]
 8000248:	009b      	lsls	r3, r3, #2
 800024a:	3303      	adds	r3, #3
 800024c:	6879      	ldr	r1, [r7, #4]
 800024e:	440b      	add	r3, r1
 8000250:	7812      	ldrb	r2, [r2, #0]
 8000252:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8000254:	69fb      	ldr	r3, [r7, #28]
 8000256:	3301      	adds	r3, #1
 8000258:	61fb      	str	r3, [r7, #28]
 800025a:	69fb      	ldr	r3, [r7, #28]
 800025c:	2b03      	cmp	r3, #3
 800025e:	d9cb      	bls.n	80001f8 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8000260:	2304      	movs	r3, #4
 8000262:	61fb      	str	r3, [r7, #28]
 8000264:	e085      	b.n	8000372 <KeyExpansion+0x18a>
  {
    {
      k = (i - 1) * 4;
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800026c:	3b01      	subs	r3, #1
 800026e:	009b      	lsls	r3, r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	4413      	add	r3, r2
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 800027c:	69bb      	ldr	r3, [r7, #24]
 800027e:	3301      	adds	r3, #1
 8000280:	687a      	ldr	r2, [r7, #4]
 8000282:	4413      	add	r3, r2
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3302      	adds	r3, #2
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	4413      	add	r3, r2
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8000294:	69bb      	ldr	r3, [r7, #24]
 8000296:	3303      	adds	r3, #3
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	f003 0303 	and.w	r3, r3, #3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d125      	bne.n	80002f6 <KeyExpansion+0x10e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80002aa:	7b3b      	ldrb	r3, [r7, #12]
 80002ac:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 80002ae:	7b7b      	ldrb	r3, [r7, #13]
 80002b0:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 80002b2:	7bbb      	ldrb	r3, [r7, #14]
 80002b4:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 80002ba:	7dfb      	ldrb	r3, [r7, #23]
 80002bc:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 80002be:	7b3b      	ldrb	r3, [r7, #12]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b30      	ldr	r3, [pc, #192]	; (8000384 <KeyExpansion+0x19c>)
 80002c4:	5c9b      	ldrb	r3, [r3, r2]
 80002c6:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 80002c8:	7b7b      	ldrb	r3, [r7, #13]
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <KeyExpansion+0x19c>)
 80002ce:	5c9b      	ldrb	r3, [r3, r2]
 80002d0:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	461a      	mov	r2, r3
 80002d6:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <KeyExpansion+0x19c>)
 80002d8:	5c9b      	ldrb	r3, [r3, r2]
 80002da:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
 80002de:	461a      	mov	r2, r3
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <KeyExpansion+0x19c>)
 80002e2:	5c9b      	ldrb	r3, [r3, r2]
 80002e4:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80002e6:	7b3a      	ldrb	r2, [r7, #12]
 80002e8:	69fb      	ldr	r3, [r7, #28]
 80002ea:	089b      	lsrs	r3, r3, #2
 80002ec:	4926      	ldr	r1, [pc, #152]	; (8000388 <KeyExpansion+0x1a0>)
 80002ee:	5ccb      	ldrb	r3, [r1, r3]
 80002f0:	4053      	eors	r3, r2
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	69fb      	ldr	r3, [r7, #28]
 80002fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000302:	3b04      	subs	r3, #4
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	4413      	add	r3, r2
 800030e:	7819      	ldrb	r1, [r3, #0]
 8000310:	7b3a      	ldrb	r2, [r7, #12]
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	693b      	ldr	r3, [r7, #16]
 8000316:	4403      	add	r3, r0
 8000318:	404a      	eors	r2, r1
 800031a:	b2d2      	uxtb	r2, r2
 800031c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 800031e:	69bb      	ldr	r3, [r7, #24]
 8000320:	3301      	adds	r3, #1
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	7819      	ldrb	r1, [r3, #0]
 8000328:	7b7a      	ldrb	r2, [r7, #13]
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	3301      	adds	r3, #1
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	4403      	add	r3, r0
 8000332:	404a      	eors	r2, r1
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	3302      	adds	r3, #2
 800033c:	687a      	ldr	r2, [r7, #4]
 800033e:	4413      	add	r3, r2
 8000340:	7819      	ldrb	r1, [r3, #0]
 8000342:	7bba      	ldrb	r2, [r7, #14]
 8000344:	693b      	ldr	r3, [r7, #16]
 8000346:	3302      	adds	r3, #2
 8000348:	6878      	ldr	r0, [r7, #4]
 800034a:	4403      	add	r3, r0
 800034c:	404a      	eors	r2, r1
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000352:	69bb      	ldr	r3, [r7, #24]
 8000354:	3303      	adds	r3, #3
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	7819      	ldrb	r1, [r3, #0]
 800035c:	7bfa      	ldrb	r2, [r7, #15]
 800035e:	693b      	ldr	r3, [r7, #16]
 8000360:	3303      	adds	r3, #3
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	4403      	add	r3, r0
 8000366:	404a      	eors	r2, r1
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	3301      	adds	r3, #1
 8000370:	61fb      	str	r3, [r7, #28]
 8000372:	69fb      	ldr	r3, [r7, #28]
 8000374:	2b2b      	cmp	r3, #43	; 0x2b
 8000376:	f67f af76 	bls.w	8000266 <KeyExpansion+0x7e>
  }
}
 800037a:	bf00      	nop
 800037c:	3724      	adds	r7, #36	; 0x24
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	08001c8c 	.word	0x08001c8c
 8000388:	08001e8c 	.word	0x08001e8c

0800038c <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6839      	ldr	r1, [r7, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ff24 	bl	80001e8 <KeyExpansion>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	60b9      	str	r1, [r7, #8]
 80003b2:	607a      	str	r2, [r7, #4]
 80003b4:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80003b6:	2300      	movs	r3, #0
 80003b8:	75fb      	strb	r3, [r7, #23]
 80003ba:	e027      	b.n	800040c <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 80003bc:	2300      	movs	r3, #0
 80003be:	75bb      	strb	r3, [r7, #22]
 80003c0:	e01e      	b.n	8000400 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 80003c2:	7dfa      	ldrb	r2, [r7, #23]
 80003c4:	7dbb      	ldrb	r3, [r7, #22]
 80003c6:	68b9      	ldr	r1, [r7, #8]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	4413      	add	r3, r2
 80003ce:	7818      	ldrb	r0, [r3, #0]
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	009a      	lsls	r2, r3, #2
 80003d4:	7dfb      	ldrb	r3, [r7, #23]
 80003d6:	4413      	add	r3, r2
 80003d8:	009a      	lsls	r2, r3, #2
 80003da:	7dbb      	ldrb	r3, [r7, #22]
 80003dc:	4413      	add	r3, r2
 80003de:	461a      	mov	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4413      	add	r3, r2
 80003e4:	7819      	ldrb	r1, [r3, #0]
 80003e6:	7dfa      	ldrb	r2, [r7, #23]
 80003e8:	7dbb      	ldrb	r3, [r7, #22]
 80003ea:	4041      	eors	r1, r0
 80003ec:	b2c8      	uxtb	r0, r1
 80003ee:	68b9      	ldr	r1, [r7, #8]
 80003f0:	0092      	lsls	r2, r2, #2
 80003f2:	440a      	add	r2, r1
 80003f4:	4413      	add	r3, r2
 80003f6:	4602      	mov	r2, r0
 80003f8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80003fa:	7dbb      	ldrb	r3, [r7, #22]
 80003fc:	3301      	adds	r3, #1
 80003fe:	75bb      	strb	r3, [r7, #22]
 8000400:	7dbb      	ldrb	r3, [r7, #22]
 8000402:	2b03      	cmp	r3, #3
 8000404:	d9dd      	bls.n	80003c2 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 8000406:	7dfb      	ldrb	r3, [r7, #23]
 8000408:	3301      	adds	r3, #1
 800040a:	75fb      	strb	r3, [r7, #23]
 800040c:	7dfb      	ldrb	r3, [r7, #23]
 800040e:	2b03      	cmp	r3, #3
 8000410:	d9d4      	bls.n	80003bc <AddRoundKey+0x14>
    }
  }
}
 8000412:	bf00      	nop
 8000414:	371c      	adds	r7, #28
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000424:	2300      	movs	r3, #0
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	e01d      	b.n	8000466 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 800042a:	2300      	movs	r3, #0
 800042c:	73bb      	strb	r3, [r7, #14]
 800042e:	e014      	b.n	800045a <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8000430:	7bba      	ldrb	r2, [r7, #14]
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	6879      	ldr	r1, [r7, #4]
 8000436:	0092      	lsls	r2, r2, #2
 8000438:	440a      	add	r2, r1
 800043a:	4413      	add	r3, r2
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	7bba      	ldrb	r2, [r7, #14]
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	490c      	ldr	r1, [pc, #48]	; (8000478 <SubBytes+0x5c>)
 8000446:	5c08      	ldrb	r0, [r1, r0]
 8000448:	6879      	ldr	r1, [r7, #4]
 800044a:	0092      	lsls	r2, r2, #2
 800044c:	440a      	add	r2, r1
 800044e:	4413      	add	r3, r2
 8000450:	4602      	mov	r2, r0
 8000452:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000454:	7bbb      	ldrb	r3, [r7, #14]
 8000456:	3301      	adds	r3, #1
 8000458:	73bb      	strb	r3, [r7, #14]
 800045a:	7bbb      	ldrb	r3, [r7, #14]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d9e7      	bls.n	8000430 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	3301      	adds	r3, #1
 8000464:	73fb      	strb	r3, [r7, #15]
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	2b03      	cmp	r3, #3
 800046a:	d9de      	bls.n	800042a <SubBytes+0xe>
    }
  }
}
 800046c:	bf00      	nop
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	08001c8c 	.word	0x08001c8c

0800047c <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	785b      	ldrb	r3, [r3, #1]
 8000488:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	795a      	ldrb	r2, [r3, #5]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	7a5a      	ldrb	r2, [r3, #9]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	7b5a      	ldrb	r2, [r3, #13]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	7bfa      	ldrb	r2, [r7, #15]
 80004a6:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7a9a      	ldrb	r2, [r3, #10]
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	7bfa      	ldrb	r2, [r7, #15]
 80004ba:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	799b      	ldrb	r3, [r3, #6]
 80004c0:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	7b9a      	ldrb	r2, [r3, #14]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	7bfa      	ldrb	r2, [r7, #15]
 80004ce:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	78db      	ldrb	r3, [r3, #3]
 80004d4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	7bda      	ldrb	r2, [r3, #15]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7ada      	ldrb	r2, [r3, #11]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	79da      	ldrb	r2, [r3, #7]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7bfa      	ldrb	r2, [r7, #15]
 80004f2:	71da      	strb	r2, [r3, #7]
}
 80004f4:	bf00      	nop
 80004f6:	3714      	adds	r7, #20
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr

080004fe <xtime>:

static uint8_t xtime(uint8_t x)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	4603      	mov	r3, r0
 8000506:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	b25a      	sxtb	r2, r3
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	09db      	lsrs	r3, r3, #7
 8000512:	b2db      	uxtb	r3, r3
 8000514:	4619      	mov	r1, r3
 8000516:	0049      	lsls	r1, r1, #1
 8000518:	440b      	add	r3, r1
 800051a:	4619      	mov	r1, r3
 800051c:	00c8      	lsls	r0, r1, #3
 800051e:	4619      	mov	r1, r3
 8000520:	4603      	mov	r3, r0
 8000522:	440b      	add	r3, r1
 8000524:	b2db      	uxtb	r3, r3
 8000526:	b25b      	sxtb	r3, r3
 8000528:	4053      	eors	r3, r2
 800052a:	b25b      	sxtb	r3, r3
 800052c:	b2db      	uxtb	r3, r3
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8000540:	2300      	movs	r3, #0
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	e0a4      	b.n	8000690 <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 8000546:	7bfa      	ldrb	r2, [r7, #15]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800054e:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 8000550:	7bfa      	ldrb	r2, [r7, #15]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8000558:	7bfb      	ldrb	r3, [r7, #15]
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	440b      	add	r3, r1
 8000560:	785b      	ldrb	r3, [r3, #1]
 8000562:	4053      	eors	r3, r2
 8000564:	b2da      	uxtb	r2, r3
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	440b      	add	r3, r1
 800056e:	789b      	ldrb	r3, [r3, #2]
 8000570:	4053      	eors	r3, r2
 8000572:	b2da      	uxtb	r2, r3
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	440b      	add	r3, r1
 800057c:	78db      	ldrb	r3, [r3, #3]
 800057e:	4053      	eors	r3, r2
 8000580:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8000582:	7bfa      	ldrb	r2, [r7, #15]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	785b      	ldrb	r3, [r3, #1]
 8000594:	4053      	eors	r3, r2
 8000596:	733b      	strb	r3, [r7, #12]
 8000598:	7b3b      	ldrb	r3, [r7, #12]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffaf 	bl	80004fe <xtime>
 80005a0:	4603      	mov	r3, r0
 80005a2:	733b      	strb	r3, [r7, #12]
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80005ac:	7b3a      	ldrb	r2, [r7, #12]
 80005ae:	7b7b      	ldrb	r3, [r7, #13]
 80005b0:	4053      	eors	r3, r2
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	7bfa      	ldrb	r2, [r7, #15]
 80005b6:	404b      	eors	r3, r1
 80005b8:	b2d9      	uxtb	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	785a      	ldrb	r2, [r3, #1]
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	4053      	eors	r3, r2
 80005d6:	733b      	strb	r3, [r7, #12]
 80005d8:	7b3b      	ldrb	r3, [r7, #12]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff ff8f 	bl	80004fe <xtime>
 80005e0:	4603      	mov	r3, r0
 80005e2:	733b      	strb	r3, [r7, #12]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	4413      	add	r3, r2
 80005ec:	7859      	ldrb	r1, [r3, #1]
 80005ee:	7b3a      	ldrb	r2, [r7, #12]
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	4053      	eors	r3, r2
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	404a      	eors	r2, r1
 80005fa:	b2d1      	uxtb	r1, r2
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	009b      	lsls	r3, r3, #2
 8000600:	4413      	add	r3, r2
 8000602:	460a      	mov	r2, r1
 8000604:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	789a      	ldrb	r2, [r3, #2]
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	78db      	ldrb	r3, [r3, #3]
 800061a:	4053      	eors	r3, r2
 800061c:	733b      	strb	r3, [r7, #12]
 800061e:	7b3b      	ldrb	r3, [r7, #12]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff6c 	bl	80004fe <xtime>
 8000626:	4603      	mov	r3, r0
 8000628:	733b      	strb	r3, [r7, #12]
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	7899      	ldrb	r1, [r3, #2]
 8000634:	7b3a      	ldrb	r2, [r7, #12]
 8000636:	7b7b      	ldrb	r3, [r7, #13]
 8000638:	4053      	eors	r3, r2
 800063a:	b2da      	uxtb	r2, r3
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	404a      	eors	r2, r1
 8000640:	b2d1      	uxtb	r1, r2
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	460a      	mov	r2, r1
 800064a:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4413      	add	r3, r2
 8000654:	78da      	ldrb	r2, [r3, #3]
 8000656:	7bbb      	ldrb	r3, [r7, #14]
 8000658:	4053      	eors	r3, r2
 800065a:	733b      	strb	r3, [r7, #12]
 800065c:	7b3b      	ldrb	r3, [r7, #12]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff4d 	bl	80004fe <xtime>
 8000664:	4603      	mov	r3, r0
 8000666:	733b      	strb	r3, [r7, #12]
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	78d9      	ldrb	r1, [r3, #3]
 8000672:	7b3a      	ldrb	r2, [r7, #12]
 8000674:	7b7b      	ldrb	r3, [r7, #13]
 8000676:	4053      	eors	r3, r2
 8000678:	b2da      	uxtb	r2, r3
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	404a      	eors	r2, r1
 800067e:	b2d1      	uxtb	r1, r2
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	460a      	mov	r2, r1
 8000688:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b03      	cmp	r3, #3
 8000694:	f67f af57 	bls.w	8000546 <MixColumns+0xe>
  }
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <InvMixColumns>:
#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	e33b      	b.n	8000d26 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80006b6:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80006dc:	7afb      	ldrb	r3, [r7, #11]
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff0d 	bl	80004fe <xtime>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff09 	bl	80004fe <xtime>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff05 	bl	80004fe <xtime>
 80006f4:	4603      	mov	r3, r0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff01 	bl	80004fe <xtime>
 80006fc:	7abb      	ldrb	r3, [r7, #10]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fefd 	bl	80004fe <xtime>
 8000704:	4603      	mov	r3, r0
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fef9 	bl	80004fe <xtime>
 800070c:	7abb      	ldrb	r3, [r7, #10]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fef5 	bl	80004fe <xtime>
 8000714:	4603      	mov	r3, r0
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fef1 	bl	80004fe <xtime>
 800071c:	4603      	mov	r3, r0
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff feed 	bl	80004fe <xtime>
 8000724:	4603      	mov	r3, r0
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fee9 	bl	80004fe <xtime>
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fee5 	bl	80004fe <xtime>
 8000734:	7a7b      	ldrb	r3, [r7, #9]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fee1 	bl	80004fe <xtime>
 800073c:	4603      	mov	r3, r0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fedd 	bl	80004fe <xtime>
 8000744:	4603      	mov	r3, r0
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fed9 	bl	80004fe <xtime>
 800074c:	4603      	mov	r3, r0
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fed5 	bl	80004fe <xtime>
 8000754:	7a3b      	ldrb	r3, [r7, #8]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fed1 	bl	80004fe <xtime>
 800075c:	7a3b      	ldrb	r3, [r7, #8]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff fecd 	bl	80004fe <xtime>
 8000764:	4603      	mov	r3, r0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fec9 	bl	80004fe <xtime>
 800076c:	7a3b      	ldrb	r3, [r7, #8]
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fec5 	bl	80004fe <xtime>
 8000774:	4603      	mov	r3, r0
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fec1 	bl	80004fe <xtime>
 800077c:	4603      	mov	r3, r0
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff febd 	bl	80004fe <xtime>
 8000784:	4603      	mov	r3, r0
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff feb9 	bl	80004fe <xtime>
 800078c:	7afb      	ldrb	r3, [r7, #11]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff feb5 	bl	80004fe <xtime>
 8000794:	4603      	mov	r3, r0
 8000796:	461c      	mov	r4, r3
 8000798:	7afb      	ldrb	r3, [r7, #11]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff feaf 	bl	80004fe <xtime>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feab 	bl	80004fe <xtime>
 80007a8:	4603      	mov	r3, r0
 80007aa:	4063      	eors	r3, r4
 80007ac:	b2dc      	uxtb	r4, r3
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fea4 	bl	80004fe <xtime>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fea0 	bl	80004fe <xtime>
 80007be:	4603      	mov	r3, r0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe9c 	bl	80004fe <xtime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4063      	eors	r3, r4
 80007ca:	b2dc      	uxtb	r4, r3
 80007cc:	7abb      	ldrb	r3, [r7, #10]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe95 	bl	80004fe <xtime>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	7abb      	ldrb	r3, [r7, #10]
 80007da:	4053      	eors	r3, r2
 80007dc:	b2dd      	uxtb	r5, r3
 80007de:	7abb      	ldrb	r3, [r7, #10]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fe8c 	bl	80004fe <xtime>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fe88 	bl	80004fe <xtime>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe84 	bl	80004fe <xtime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	406b      	eors	r3, r5
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4063      	eors	r3, r4
 80007fe:	b2dc      	uxtb	r4, r3
 8000800:	7a7b      	ldrb	r3, [r7, #9]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fe7b 	bl	80004fe <xtime>
 8000808:	4603      	mov	r3, r0
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fe77 	bl	80004fe <xtime>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	7a7b      	ldrb	r3, [r7, #9]
 8000816:	4053      	eors	r3, r2
 8000818:	b2dd      	uxtb	r5, r3
 800081a:	7a7b      	ldrb	r3, [r7, #9]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fe6e 	bl	80004fe <xtime>
 8000822:	4603      	mov	r3, r0
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fe6a 	bl	80004fe <xtime>
 800082a:	4603      	mov	r3, r0
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fe66 	bl	80004fe <xtime>
 8000832:	4603      	mov	r3, r0
 8000834:	406b      	eors	r3, r5
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4063      	eors	r3, r4
 800083a:	b2dc      	uxtb	r4, r3
 800083c:	7a3b      	ldrb	r3, [r7, #8]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe5d 	bl	80004fe <xtime>
 8000844:	4603      	mov	r3, r0
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe59 	bl	80004fe <xtime>
 800084c:	4603      	mov	r3, r0
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fe55 	bl	80004fe <xtime>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	7a3b      	ldrb	r3, [r7, #8]
 800085a:	4053      	eors	r3, r2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4063      	eors	r3, r4
 8000860:	b2d9      	uxtb	r1, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800086a:	7afb      	ldrb	r3, [r7, #11]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe46 	bl	80004fe <xtime>
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fe42 	bl	80004fe <xtime>
 800087a:	4603      	mov	r3, r0
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe3e 	bl	80004fe <xtime>
 8000882:	7afb      	ldrb	r3, [r7, #11]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe3a 	bl	80004fe <xtime>
 800088a:	4603      	mov	r3, r0
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe36 	bl	80004fe <xtime>
 8000892:	4603      	mov	r3, r0
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe32 	bl	80004fe <xtime>
 800089a:	4603      	mov	r3, r0
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe2e 	bl	80004fe <xtime>
 80008a2:	7abb      	ldrb	r3, [r7, #10]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe2a 	bl	80004fe <xtime>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe26 	bl	80004fe <xtime>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe22 	bl	80004fe <xtime>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fe1e 	bl	80004fe <xtime>
 80008c2:	7a7b      	ldrb	r3, [r7, #9]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe1a 	bl	80004fe <xtime>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff fe16 	bl	80004fe <xtime>
 80008d2:	7a7b      	ldrb	r3, [r7, #9]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe12 	bl	80004fe <xtime>
 80008da:	4603      	mov	r3, r0
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe0e 	bl	80004fe <xtime>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe0a 	bl	80004fe <xtime>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe06 	bl	80004fe <xtime>
 80008f2:	7a3b      	ldrb	r3, [r7, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe02 	bl	80004fe <xtime>
 80008fa:	7a3b      	ldrb	r3, [r7, #8]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fdfe 	bl	80004fe <xtime>
 8000902:	4603      	mov	r3, r0
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fdfa 	bl	80004fe <xtime>
 800090a:	4603      	mov	r3, r0
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fdf6 	bl	80004fe <xtime>
 8000912:	4603      	mov	r3, r0
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fdf2 	bl	80004fe <xtime>
 800091a:	7afb      	ldrb	r3, [r7, #11]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fdee 	bl	80004fe <xtime>
 8000922:	4603      	mov	r3, r0
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fdea 	bl	80004fe <xtime>
 800092a:	4603      	mov	r3, r0
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fde6 	bl	80004fe <xtime>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	4053      	eors	r3, r2
 800093a:	b2dc      	uxtb	r4, r3
 800093c:	7abb      	ldrb	r3, [r7, #10]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fddd 	bl	80004fe <xtime>
 8000944:	4603      	mov	r3, r0
 8000946:	461d      	mov	r5, r3
 8000948:	7abb      	ldrb	r3, [r7, #10]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fdd7 	bl	80004fe <xtime>
 8000950:	4603      	mov	r3, r0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fdd3 	bl	80004fe <xtime>
 8000958:	4603      	mov	r3, r0
 800095a:	406b      	eors	r3, r5
 800095c:	b2dd      	uxtb	r5, r3
 800095e:	7abb      	ldrb	r3, [r7, #10]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fdcc 	bl	80004fe <xtime>
 8000966:	4603      	mov	r3, r0
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fdc8 	bl	80004fe <xtime>
 800096e:	4603      	mov	r3, r0
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fdc4 	bl	80004fe <xtime>
 8000976:	4603      	mov	r3, r0
 8000978:	406b      	eors	r3, r5
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4063      	eors	r3, r4
 800097e:	b2dc      	uxtb	r4, r3
 8000980:	7a7b      	ldrb	r3, [r7, #9]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fdbb 	bl	80004fe <xtime>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	7a7b      	ldrb	r3, [r7, #9]
 800098e:	4053      	eors	r3, r2
 8000990:	b2dd      	uxtb	r5, r3
 8000992:	7a7b      	ldrb	r3, [r7, #9]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fdb2 	bl	80004fe <xtime>
 800099a:	4603      	mov	r3, r0
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fdae 	bl	80004fe <xtime>
 80009a2:	4603      	mov	r3, r0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fdaa 	bl	80004fe <xtime>
 80009aa:	4603      	mov	r3, r0
 80009ac:	406b      	eors	r3, r5
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	4063      	eors	r3, r4
 80009b2:	b2dc      	uxtb	r4, r3
 80009b4:	7a3b      	ldrb	r3, [r7, #8]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fda1 	bl	80004fe <xtime>
 80009bc:	4603      	mov	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fd9d 	bl	80004fe <xtime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	7a3b      	ldrb	r3, [r7, #8]
 80009ca:	4053      	eors	r3, r2
 80009cc:	b2dd      	uxtb	r5, r3
 80009ce:	7a3b      	ldrb	r3, [r7, #8]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fd94 	bl	80004fe <xtime>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd90 	bl	80004fe <xtime>
 80009de:	4603      	mov	r3, r0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fd8c 	bl	80004fe <xtime>
 80009e6:	4603      	mov	r3, r0
 80009e8:	406b      	eors	r3, r5
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4063      	eors	r3, r4
 80009ee:	b2d9      	uxtb	r1, r3
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	460a      	mov	r2, r1
 80009fa:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 80009fc:	7afb      	ldrb	r3, [r7, #11]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd7d 	bl	80004fe <xtime>
 8000a04:	7afb      	ldrb	r3, [r7, #11]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fd79 	bl	80004fe <xtime>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fd75 	bl	80004fe <xtime>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff fd71 	bl	80004fe <xtime>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fd6d 	bl	80004fe <xtime>
 8000a24:	7abb      	ldrb	r3, [r7, #10]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd69 	bl	80004fe <xtime>
 8000a2c:	7abb      	ldrb	r3, [r7, #10]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fd65 	bl	80004fe <xtime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fd61 	bl	80004fe <xtime>
 8000a3c:	7abb      	ldrb	r3, [r7, #10]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fd5d 	bl	80004fe <xtime>
 8000a44:	4603      	mov	r3, r0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd59 	bl	80004fe <xtime>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd55 	bl	80004fe <xtime>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fd51 	bl	80004fe <xtime>
 8000a5c:	7a7b      	ldrb	r3, [r7, #9]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fd4d 	bl	80004fe <xtime>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fd49 	bl	80004fe <xtime>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fd45 	bl	80004fe <xtime>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fd41 	bl	80004fe <xtime>
 8000a7c:	7a3b      	ldrb	r3, [r7, #8]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd3d 	bl	80004fe <xtime>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd39 	bl	80004fe <xtime>
 8000a8c:	7a3b      	ldrb	r3, [r7, #8]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd35 	bl	80004fe <xtime>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fd31 	bl	80004fe <xtime>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fd2d 	bl	80004fe <xtime>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff fd29 	bl	80004fe <xtime>
 8000aac:	7afb      	ldrb	r3, [r7, #11]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fd25 	bl	80004fe <xtime>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fd21 	bl	80004fe <xtime>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	7afb      	ldrb	r3, [r7, #11]
 8000ac2:	4053      	eors	r3, r2
 8000ac4:	b2dc      	uxtb	r4, r3
 8000ac6:	7afb      	ldrb	r3, [r7, #11]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fd18 	bl	80004fe <xtime>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff fd14 	bl	80004fe <xtime>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd10 	bl	80004fe <xtime>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4063      	eors	r3, r4
 8000ae2:	b2dc      	uxtb	r4, r3
 8000ae4:	7abb      	ldrb	r3, [r7, #10]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fd09 	bl	80004fe <xtime>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd05 	bl	80004fe <xtime>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fd01 	bl	80004fe <xtime>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	7abb      	ldrb	r3, [r7, #10]
 8000b02:	4053      	eors	r3, r2
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4063      	eors	r3, r4
 8000b08:	b2dc      	uxtb	r4, r3
 8000b0a:	7a7b      	ldrb	r3, [r7, #9]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fcf6 	bl	80004fe <xtime>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461d      	mov	r5, r3
 8000b16:	7a7b      	ldrb	r3, [r7, #9]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fcf0 	bl	80004fe <xtime>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fcec 	bl	80004fe <xtime>
 8000b26:	4603      	mov	r3, r0
 8000b28:	406b      	eors	r3, r5
 8000b2a:	b2dd      	uxtb	r5, r3
 8000b2c:	7a7b      	ldrb	r3, [r7, #9]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fce5 	bl	80004fe <xtime>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fce1 	bl	80004fe <xtime>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fcdd 	bl	80004fe <xtime>
 8000b44:	4603      	mov	r3, r0
 8000b46:	406b      	eors	r3, r5
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4063      	eors	r3, r4
 8000b4c:	b2dc      	uxtb	r4, r3
 8000b4e:	7a3b      	ldrb	r3, [r7, #8]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fcd4 	bl	80004fe <xtime>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	7a3b      	ldrb	r3, [r7, #8]
 8000b5c:	4053      	eors	r3, r2
 8000b5e:	b2dd      	uxtb	r5, r3
 8000b60:	7a3b      	ldrb	r3, [r7, #8]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fccb 	bl	80004fe <xtime>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fcc7 	bl	80004fe <xtime>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fcc3 	bl	80004fe <xtime>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	406b      	eors	r3, r5
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4063      	eors	r3, r4
 8000b80:	b2d9      	uxtb	r1, r3
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	460a      	mov	r2, r1
 8000b8c:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000b8e:	7afb      	ldrb	r3, [r7, #11]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fcb4 	bl	80004fe <xtime>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fcb0 	bl	80004fe <xtime>
 8000b9e:	7afb      	ldrb	r3, [r7, #11]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fcac 	bl	80004fe <xtime>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fca8 	bl	80004fe <xtime>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fca4 	bl	80004fe <xtime>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fca0 	bl	80004fe <xtime>
 8000bbe:	7abb      	ldrb	r3, [r7, #10]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fc9c 	bl	80004fe <xtime>
 8000bc6:	7abb      	ldrb	r3, [r7, #10]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc98 	bl	80004fe <xtime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc94 	bl	80004fe <xtime>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fc90 	bl	80004fe <xtime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fc8c 	bl	80004fe <xtime>
 8000be6:	7a7b      	ldrb	r3, [r7, #9]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fc88 	bl	80004fe <xtime>
 8000bee:	7a7b      	ldrb	r3, [r7, #9]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fc84 	bl	80004fe <xtime>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fc80 	bl	80004fe <xtime>
 8000bfe:	7a7b      	ldrb	r3, [r7, #9]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fc7c 	bl	80004fe <xtime>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc78 	bl	80004fe <xtime>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fc74 	bl	80004fe <xtime>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc70 	bl	80004fe <xtime>
 8000c1e:	7a3b      	ldrb	r3, [r7, #8]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fc6c 	bl	80004fe <xtime>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fc68 	bl	80004fe <xtime>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fc64 	bl	80004fe <xtime>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fc60 	bl	80004fe <xtime>
 8000c3e:	7afb      	ldrb	r3, [r7, #11]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff fc5c 	bl	80004fe <xtime>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	7afb      	ldrb	r3, [r7, #11]
 8000c4c:	4053      	eors	r3, r2
 8000c4e:	b2dc      	uxtb	r4, r3
 8000c50:	7afb      	ldrb	r3, [r7, #11]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fc53 	bl	80004fe <xtime>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fc4f 	bl	80004fe <xtime>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fc4b 	bl	80004fe <xtime>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4063      	eors	r3, r4
 8000c6c:	b2dc      	uxtb	r4, r3
 8000c6e:	7abb      	ldrb	r3, [r7, #10]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fc44 	bl	80004fe <xtime>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fc40 	bl	80004fe <xtime>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	461a      	mov	r2, r3
 8000c82:	7abb      	ldrb	r3, [r7, #10]
 8000c84:	4053      	eors	r3, r2
 8000c86:	b2dd      	uxtb	r5, r3
 8000c88:	7abb      	ldrb	r3, [r7, #10]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fc37 	bl	80004fe <xtime>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fc33 	bl	80004fe <xtime>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fc2f 	bl	80004fe <xtime>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	406b      	eors	r3, r5
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	4063      	eors	r3, r4
 8000ca8:	b2dc      	uxtb	r4, r3
 8000caa:	7a7b      	ldrb	r3, [r7, #9]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc26 	bl	80004fe <xtime>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fc22 	bl	80004fe <xtime>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fc1e 	bl	80004fe <xtime>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	7a7b      	ldrb	r3, [r7, #9]
 8000cc8:	4053      	eors	r3, r2
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4063      	eors	r3, r4
 8000cce:	b2dc      	uxtb	r4, r3
 8000cd0:	7a3b      	ldrb	r3, [r7, #8]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fc13 	bl	80004fe <xtime>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461d      	mov	r5, r3
 8000cdc:	7a3b      	ldrb	r3, [r7, #8]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fc0d 	bl	80004fe <xtime>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc09 	bl	80004fe <xtime>
 8000cec:	4603      	mov	r3, r0
 8000cee:	406b      	eors	r3, r5
 8000cf0:	b2dd      	uxtb	r5, r3
 8000cf2:	7a3b      	ldrb	r3, [r7, #8]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fc02 	bl	80004fe <xtime>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fbfe 	bl	80004fe <xtime>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fbfa 	bl	80004fe <xtime>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	406b      	eors	r3, r5
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	4063      	eors	r3, r4
 8000d12:	b2d9      	uxtb	r1, r3
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	f77f acc0 	ble.w	80006ae <InvMixColumns+0xe>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d38 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e01d      	b.n	8000d82 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000d46:	2300      	movs	r3, #0
 8000d48:	73bb      	strb	r3, [r7, #14]
 8000d4a:	e014      	b.n	8000d76 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000d4c:	7bba      	ldrb	r2, [r7, #14]
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	440a      	add	r2, r1
 8000d56:	4413      	add	r3, r2
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	7bba      	ldrb	r2, [r7, #14]
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	490c      	ldr	r1, [pc, #48]	; (8000d94 <InvSubBytes+0x5c>)
 8000d62:	5c08      	ldrb	r0, [r1, r0]
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	0092      	lsls	r2, r2, #2
 8000d68:	440a      	add	r2, r1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73bb      	strb	r3, [r7, #14]
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d9e7      	bls.n	8000d4c <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	73fb      	strb	r3, [r7, #15]
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d9de      	bls.n	8000d46 <InvSubBytes+0xe>
    }
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	08001d8c 	.word	0x08001d8c

08000d98 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7b5b      	ldrb	r3, [r3, #13]
 8000da4:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7a5a      	ldrb	r2, [r3, #9]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	795a      	ldrb	r2, [r3, #5]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	785a      	ldrb	r2, [r3, #1]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7bfa      	ldrb	r2, [r7, #15]
 8000dc2:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7a9a      	ldrb	r2, [r3, #10]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	799b      	ldrb	r3, [r3, #6]
 8000ddc:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7b9a      	ldrb	r2, [r3, #14]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	78db      	ldrb	r3, [r3, #3]
 8000df0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	79da      	ldrb	r2, [r3, #7]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7ada      	ldrb	r2, [r3, #11]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7bda      	ldrb	r2, [r3, #15]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	73da      	strb	r2, [r3, #15]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr

08000e1a <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fabb 	bl	80003a8 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff faf0 	bl	800041c <SubBytes>
    ShiftRows(state);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fb1d 	bl	800047c <ShiftRows>
    if (round == Nr) {
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b0a      	cmp	r3, #10
 8000e46:	d00c      	beq.n	8000e62 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fb75 	bl	8000538 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff faa7 	bl	80003a8 <AddRoundKey>
  for (round = 1; ; ++round)
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8000e60:	e7e9      	b.n	8000e36 <Cipher+0x1c>
      break;
 8000e62:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8000e64:	683a      	ldr	r2, [r7, #0]
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	200a      	movs	r0, #10
 8000e6a:	f7ff fa9d 	bl	80003a8 <AddRoundKey>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8000e84:	683a      	ldr	r2, [r7, #0]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f7ff fa8d 	bl	80003a8 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8000e8e:	2309      	movs	r3, #9
 8000e90:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff80 	bl	8000d98 <InvShiftRows>
    InvSubBytes(state);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff4d 	bl	8000d38 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	683a      	ldr	r2, [r7, #0]
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fa7f 	bl	80003a8 <AddRoundKey>
    if (round == 0) {
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fbf5 	bl	80006a0 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8000ebc:	e7e9      	b.n	8000e92 <InvCipher+0x1c>
      break;
 8000ebe:	bf00      	nop
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f7ff ff9f 	bl	8000e1a <Cipher>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f7ff ffbf 	bl	8000e76 <InvCipher>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <__NVIC_EnableIRQ+0x34>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <TIM2_IRQHandler>:

/*************************************************
* timer 2 interrupt handler
*************************************************/
uint8_t TIM2_IRQHandler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
    TIM2->SR = (uint16_t)(~(1 << 0));
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f40:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f44:	611a      	str	r2, [r3, #16]

    if(ButAct == 1){
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <TIM2_IRQHandler+0x30>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d106      	bne.n	8000f5e <TIM2_IRQHandler+0x26>
    	x++; }		//40 ticks per sec
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <TIM2_IRQHandler+0x34>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <TIM2_IRQHandler+0x34>)
 8000f5c:	701a      	strb	r2, [r3, #0]
 }
 8000f5e:	bf00      	nop
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000032 	.word	0x20000032
 8000f6c:	20000030 	.word	0x20000030

08000f70 <EXTI0_IRQHandler>:

/*************************************************
* external interrupt handler
*************************************************/
void EXTI0_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 0)){
 8000f76:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <EXTI0_IRQHandler+0x7c>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d030      	beq.n	8000fe4 <EXTI0_IRQHandler+0x74>
		ButAct ^= 0x1;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <EXTI0_IRQHandler+0x80>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <EXTI0_IRQHandler+0x80>)
 8000f90:	701a      	strb	r2, [r3, #0]
		for(uint32_t j=0; j<500000; j++);
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	e002      	b.n	8000f9e <EXTI0_IRQHandler+0x2e>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <EXTI0_IRQHandler+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d9f8      	bls.n	8000f98 <EXTI0_IRQHandler+0x28>

		if (ButAct == 1){
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <EXTI0_IRQHandler+0x80>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d116      	bne.n	8000fde <EXTI0_IRQHandler+0x6e>
			y++;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <EXTI0_IRQHandler+0x88>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <EXTI0_IRQHandler+0x88>)
 8000fbc:	701a      	strb	r2, [r3, #0]

			read_flash(KEYADDR);
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <EXTI0_IRQHandler+0x8c>)
 8000fc0:	f000 fb32 	bl	8001628 <read_flash>
			unlock_flash();
 8000fc4:	f000 fab0 	bl	8001528 <unlock_flash>
			RC_in = mem_datao;
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <EXTI0_IRQHandler+0x90>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <EXTI0_IRQHandler+0x94>)
 8000fce:	6013      	str	r3, [r2, #0]
			lock_flash();
 8000fd0:	f000 fabc 	bl	800154c <lock_flash>

			Rcode = RC_in % 0x100;
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <EXTI0_IRQHandler+0x94>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <EXTI0_IRQHandler+0x98>)
 8000fdc:	6013      	str	r3, [r2, #0]
			//GPIOD->ODR ^= (uint16_t)(1 << 14);

		}

		EXTI->PR = (1 << 0);
 8000fde:	4b03      	ldr	r3, [pc, #12]	; (8000fec <EXTI0_IRQHandler+0x7c>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	615a      	str	r2, [r3, #20]
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013c00 	.word	0x40013c00
 8000ff0:	20000032 	.word	0x20000032
 8000ff4:	0007a11f 	.word	0x0007a11f
 8000ff8:	20000031 	.word	0x20000031
 8000ffc:	0800c000 	.word	0x0800c000
 8001000:	20000078 	.word	0x20000078
 8001004:	20000000 	.word	0x20000000
 8001008:	20000038 	.word	0x20000038

0800100c <SysTick_Handler>:

/*************************************************
* SysTick interrupt handler
*************************************************/
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0b6      	sub	sp, #216	; 0xd8
 8001010:	af00      	add	r7, sp, #0

	IWDG->KR |= 0xaaaa;	// Resetting IWDG timer
 8001012:	4b9a      	ldr	r3, [pc, #616]	; (800127c <SysTick_Handler+0x270>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a99      	ldr	r2, [pc, #612]	; (800127c <SysTick_Handler+0x270>)
 8001018:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 800101c:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 8001020:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001022:	b672      	cpsid	i

	__disable_irq();

	if(ButAct == 0){
 8001024:	4b96      	ldr	r3, [pc, #600]	; (8001280 <SysTick_Handler+0x274>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f040 81b7 	bne.w	800139e <SysTick_Handler+0x392>
			if((x >= 1) & (y >= 2) & (x < 40)){		//DOUBLE PRESS
 8001030:	4b94      	ldr	r3, [pc, #592]	; (8001284 <SysTick_Handler+0x278>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b91      	ldr	r3, [pc, #580]	; (8001288 <SysTick_Handler+0x27c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b01      	cmp	r3, #1
 8001048:	bf8c      	ite	hi
 800104a:	2301      	movhi	r3, #1
 800104c:	2300      	movls	r3, #0
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4013      	ands	r3, r2
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <SysTick_Handler+0x278>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b27      	cmp	r3, #39	; 0x27
 800105e:	bf94      	ite	ls
 8001060:	2301      	movls	r3, #1
 8001062:	2300      	movhi	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4013      	ands	r3, r2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d075      	beq.n	8001158 <SysTick_Handler+0x14c>
				ButAct = 0;
 800106c:	4b84      	ldr	r3, [pc, #528]	; (8001280 <SysTick_Handler+0x274>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	       	    x = 0;
 8001072:	4b84      	ldr	r3, [pc, #528]	; (8001284 <SysTick_Handler+0x278>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
	       	    y = 0;
 8001078:	4b83      	ldr	r3, [pc, #524]	; (8001288 <SysTick_Handler+0x27c>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
	       	    ButAct = 0;
 800107e:	4b80      	ldr	r3, [pc, #512]	; (8001280 <SysTick_Handler+0x274>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
	        	//GPIOD->ODR ^= (uint16_t)(1 << 13);

	        	RC_in++;
 8001084:	4b81      	ldr	r3, [pc, #516]	; (800128c <SysTick_Handler+0x280>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a80      	ldr	r2, [pc, #512]	; (800128c <SysTick_Handler+0x280>)
 800108c:	6013      	str	r3, [r2, #0]
	        	identifier = 0x02;						//DOOR LOCK
 800108e:	4b80      	ldr	r3, [pc, #512]	; (8001290 <SysTick_Handler+0x284>)
 8001090:	2202      	movs	r2, #2
 8001092:	701a      	strb	r2, [r3, #0]
	        	DataFrame = ((Rcode << 24) | (DataTemplate << 0) | (identifier << 0));
 8001094:	4b7f      	ldr	r3, [pc, #508]	; (8001294 <SysTick_Handler+0x288>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	061a      	lsls	r2, r3, #24
 800109a:	4b7f      	ldr	r3, [pc, #508]	; (8001298 <SysTick_Handler+0x28c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4313      	orrs	r3, r2
 80010a0:	4a7b      	ldr	r2, [pc, #492]	; (8001290 <SysTick_Handler+0x284>)
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	4313      	orrs	r3, r2
 80010a8:	4a7c      	ldr	r2, [pc, #496]	; (800129c <SysTick_Handler+0x290>)
 80010aa:	6013      	str	r3, [r2, #0]
	        	identifier = 0;
 80010ac:	4b78      	ldr	r3, [pc, #480]	; (8001290 <SysTick_Handler+0x284>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]

	        	// DataFrame Encryption
	        	uint8_t x0 = DataFrame & 0xFF;
 80010b2:	4b7a      	ldr	r3, [pc, #488]	; (800129c <SysTick_Handler+0x290>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	        	uint8_t x1 = (DataFrame >> 8) & 0xFF;
 80010ba:	4b78      	ldr	r3, [pc, #480]	; (800129c <SysTick_Handler+0x290>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	0a1b      	lsrs	r3, r3, #8
 80010c0:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
	        	uint8_t x2 = (DataFrame >> 16) & 0xFF;
 80010c4:	4b75      	ldr	r3, [pc, #468]	; (800129c <SysTick_Handler+0x290>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
	        	uint8_t x3 = (DataFrame >> 24) & 0xFF;
 80010ce:	4b73      	ldr	r3, [pc, #460]	; (800129c <SysTick_Handler+0x290>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	0e1b      	lsrs	r3, r3, #24
 80010d4:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
	        	in[0] = x0;
 80010d8:	4a71      	ldr	r2, [pc, #452]	; (80012a0 <SysTick_Handler+0x294>)
 80010da:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80010de:	7013      	strb	r3, [r2, #0]
	        	in[1] = x1;
 80010e0:	4a6f      	ldr	r2, [pc, #444]	; (80012a0 <SysTick_Handler+0x294>)
 80010e2:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 80010e6:	7053      	strb	r3, [r2, #1]
	        	in[2] = x2;
 80010e8:	4a6d      	ldr	r2, [pc, #436]	; (80012a0 <SysTick_Handler+0x294>)
 80010ea:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 80010ee:	7093      	strb	r3, [r2, #2]
	        	in[3] = x3;
 80010f0:	4a6b      	ldr	r2, [pc, #428]	; (80012a0 <SysTick_Handler+0x294>)
 80010f2:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 80010f6:	70d3      	strb	r3, [r2, #3]
	        	for (int i = 4; i < 16; i++){
 80010f8:	2304      	movs	r3, #4
 80010fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80010fe:	e00a      	b.n	8001116 <SysTick_Handler+0x10a>
	        		in[i] = 0x00;
 8001100:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <SysTick_Handler+0x294>)
 8001102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001106:	4413      	add	r3, r2
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
	        	for (int i = 4; i < 16; i++){
 800110c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001110:	3301      	adds	r3, #1
 8001112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800111a:	2b0f      	cmp	r3, #15
 800111c:	ddf0      	ble.n	8001100 <SysTick_Handler+0xf4>
	        	}
	        	struct AES_ctx ctx;
//	        	AES_init_ctx_iv(&ctx, key, iv);
//	        	AES_CBC_encrypt_buffer(&ctx, in, 16);
	        	AES_init_ctx(&ctx, key);
 800111e:	463b      	mov	r3, r7
 8001120:	4960      	ldr	r1, [pc, #384]	; (80012a4 <SysTick_Handler+0x298>)
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f932 	bl	800038c <AES_init_ctx>
	        	AES_ECB_encrypt(&ctx, in);
 8001128:	463b      	mov	r3, r7
 800112a:	495d      	ldr	r1, [pc, #372]	; (80012a0 <SysTick_Handler+0x294>)
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fecb 	bl	8000ec8 <AES_ECB_encrypt>

				unlock_flash();							//MEMORY WRITE
 8001132:	f000 f9f9 	bl	8001528 <unlock_flash>
				erase_flash_sector3();
 8001136:	f000 fa17 	bl	8001568 <erase_flash_sector3>
				write_flash(KEYADDR, RC_in);
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <SysTick_Handler+0x280>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4619      	mov	r1, r3
 8001140:	4859      	ldr	r0, [pc, #356]	; (80012a8 <SysTick_Handler+0x29c>)
 8001142:	f000 fa41 	bl	80015c8 <write_flash>
				lock_flash();
 8001146:	f000 fa01 	bl	800154c <lock_flash>

				//Enable TX interrupt
				USART3->CR1 |= (1 << 7);
 800114a:	4b58      	ldr	r3, [pc, #352]	; (80012ac <SysTick_Handler+0x2a0>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	4a57      	ldr	r2, [pc, #348]	; (80012ac <SysTick_Handler+0x2a0>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	60d3      	str	r3, [r2, #12]
 8001156:	e122      	b.n	800139e <SysTick_Handler+0x392>
	       	}

			else if((x >= 1) & (x < 40) & (y < 2)){		//SINGLE PRESS
 8001158:	4b4a      	ldr	r3, [pc, #296]	; (8001284 <SysTick_Handler+0x278>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <SysTick_Handler+0x278>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b27      	cmp	r3, #39	; 0x27
 8001170:	bf94      	ite	ls
 8001172:	2301      	movls	r3, #1
 8001174:	2300      	movhi	r3, #0
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4013      	ands	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4b42      	ldr	r3, [pc, #264]	; (8001288 <SysTick_Handler+0x27c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b01      	cmp	r3, #1
 8001186:	bf94      	ite	ls
 8001188:	2301      	movls	r3, #1
 800118a:	2300      	movhi	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 808d 	beq.w	80012b0 <SysTick_Handler+0x2a4>
	    		x = 0;
 8001196:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <SysTick_Handler+0x278>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	    		y = 0;
 800119c:	4b3a      	ldr	r3, [pc, #232]	; (8001288 <SysTick_Handler+0x27c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
	    		ButAct = 0;
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <SysTick_Handler+0x274>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	   	    	//GPIOD->ODR ^= (uint16_t)(1 << 12);

	   	    	RC_in++;
 80011a8:	4b38      	ldr	r3, [pc, #224]	; (800128c <SysTick_Handler+0x280>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a37      	ldr	r2, [pc, #220]	; (800128c <SysTick_Handler+0x280>)
 80011b0:	6013      	str	r3, [r2, #0]
	   	    	identifier = 0x01	;					//DOOR UNLCOK
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <SysTick_Handler+0x284>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
	   	    	DataFrame = ((Rcode << 24) | (DataTemplate << 0) | (identifier << 0));
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <SysTick_Handler+0x288>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	061a      	lsls	r2, r3, #24
 80011be:	4b36      	ldr	r3, [pc, #216]	; (8001298 <SysTick_Handler+0x28c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	4a32      	ldr	r2, [pc, #200]	; (8001290 <SysTick_Handler+0x284>)
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	4313      	orrs	r3, r2
 80011cc:	4a33      	ldr	r2, [pc, #204]	; (800129c <SysTick_Handler+0x290>)
 80011ce:	6013      	str	r3, [r2, #0]
	   	    	identifier = 0;
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <SysTick_Handler+0x284>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]

	   	    	// DataFrame Encryption
	   	    	uint8_t x0 = DataFrame & 0xFF;
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <SysTick_Handler+0x290>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	   	    	uint8_t x1 = (DataFrame >> 8) & 0xFF;
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <SysTick_Handler+0x290>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	   	    	uint8_t x2 = (DataFrame >> 16) & 0xFF;
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <SysTick_Handler+0x290>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	0c1b      	lsrs	r3, r3, #16
 80011ee:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	   	    	uint8_t x3 = (DataFrame >> 24) & 0xFF;
 80011f2:	4b2a      	ldr	r3, [pc, #168]	; (800129c <SysTick_Handler+0x290>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0e1b      	lsrs	r3, r3, #24
 80011f8:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
	   	    	in[0] = x0;
 80011fc:	4a28      	ldr	r2, [pc, #160]	; (80012a0 <SysTick_Handler+0x294>)
 80011fe:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8001202:	7013      	strb	r3, [r2, #0]
	   	    	in[1] = x1;
 8001204:	4a26      	ldr	r2, [pc, #152]	; (80012a0 <SysTick_Handler+0x294>)
 8001206:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800120a:	7053      	strb	r3, [r2, #1]
	   	    	in[2] = x2;
 800120c:	4a24      	ldr	r2, [pc, #144]	; (80012a0 <SysTick_Handler+0x294>)
 800120e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8001212:	7093      	strb	r3, [r2, #2]
	   	    	in[3] = x3;
 8001214:	4a22      	ldr	r2, [pc, #136]	; (80012a0 <SysTick_Handler+0x294>)
 8001216:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800121a:	70d3      	strb	r3, [r2, #3]
	   	    	for (int i = 4; i < 16; i++){
 800121c:	2304      	movs	r3, #4
 800121e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001222:	e00a      	b.n	800123a <SysTick_Handler+0x22e>
	   	    		in[i] = 0x00;
 8001224:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <SysTick_Handler+0x294>)
 8001226:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800122a:	4413      	add	r3, r2
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
	   	    	for (int i = 4; i < 16; i++){
 8001230:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800123a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800123e:	2b0f      	cmp	r3, #15
 8001240:	ddf0      	ble.n	8001224 <SysTick_Handler+0x218>
	   	    	}
	   	    	struct AES_ctx ctx;
//	   	    	AES_init_ctx_iv(&ctx, key, iv);
//	   	    	AES_CBC_encrypt_buffer(&ctx, in, 16);
	   	    	AES_init_ctx(&ctx, key);
 8001242:	463b      	mov	r3, r7
 8001244:	4917      	ldr	r1, [pc, #92]	; (80012a4 <SysTick_Handler+0x298>)
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f8a0 	bl	800038c <AES_init_ctx>
	   	    	AES_ECB_encrypt(&ctx, in);
 800124c:	463b      	mov	r3, r7
 800124e:	4914      	ldr	r1, [pc, #80]	; (80012a0 <SysTick_Handler+0x294>)
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe39 	bl	8000ec8 <AES_ECB_encrypt>

				unlock_flash();							//MEMORY WRITE
 8001256:	f000 f967 	bl	8001528 <unlock_flash>
				erase_flash_sector3();
 800125a:	f000 f985 	bl	8001568 <erase_flash_sector3>
				write_flash(KEYADDR, RC_in);
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <SysTick_Handler+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	4810      	ldr	r0, [pc, #64]	; (80012a8 <SysTick_Handler+0x29c>)
 8001266:	f000 f9af 	bl	80015c8 <write_flash>
				lock_flash();
 800126a:	f000 f96f 	bl	800154c <lock_flash>

				//Enable TX interrupt
				USART3->CR1 |= (1 << 7); //tx interrupt
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <SysTick_Handler+0x2a0>)
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <SysTick_Handler+0x2a0>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	60d3      	str	r3, [r2, #12]
 800127a:	e090      	b.n	800139e <SysTick_Handler+0x392>
 800127c:	40003000 	.word	0x40003000
 8001280:	20000032 	.word	0x20000032
 8001284:	20000030 	.word	0x20000030
 8001288:	20000031 	.word	0x20000031
 800128c:	20000000 	.word	0x20000000
 8001290:	2000008c 	.word	0x2000008c
 8001294:	20000038 	.word	0x20000038
 8001298:	20000090 	.word	0x20000090
 800129c:	20000034 	.word	0x20000034
 80012a0:	20000050 	.word	0x20000050
 80012a4:	20000004 	.word	0x20000004
 80012a8:	0800c000 	.word	0x0800c000
 80012ac:	40004800 	.word	0x40004800
	    	 }

			else if(x >= 40){							//LONG PRESS 2S
 80012b0:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <SysTick_Handler+0x39c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b27      	cmp	r3, #39	; 0x27
 80012b8:	d971      	bls.n	800139e <SysTick_Handler+0x392>
				x = 0;
 80012ba:	4b3b      	ldr	r3, [pc, #236]	; (80013a8 <SysTick_Handler+0x39c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
				y = 0;
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <SysTick_Handler+0x3a0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
				ButAct = 0;
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <SysTick_Handler+0x3a4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
	    	   	//GPIOD->ODR ^= (uint16_t)(1 << 15);

				RC_in++;
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <SysTick_Handler+0x3a8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	4a38      	ldr	r2, [pc, #224]	; (80013b4 <SysTick_Handler+0x3a8>)
 80012d4:	6013      	str	r3, [r2, #0]
				identifier = 0x10	;					//DOOR UNLCOK
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <SysTick_Handler+0x3ac>)
 80012d8:	2210      	movs	r2, #16
 80012da:	701a      	strb	r2, [r3, #0]
				DataFrame = ((Rcode << 24) | (DataTemplate << 0) | (identifier << 0));
 80012dc:	4b37      	ldr	r3, [pc, #220]	; (80013bc <SysTick_Handler+0x3b0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	061a      	lsls	r2, r3, #24
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <SysTick_Handler+0x3b4>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <SysTick_Handler+0x3ac>)
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	4313      	orrs	r3, r2
 80012f0:	4a34      	ldr	r2, [pc, #208]	; (80013c4 <SysTick_Handler+0x3b8>)
 80012f2:	6013      	str	r3, [r2, #0]
				identifier = 0;
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <SysTick_Handler+0x3ac>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]

				// DataFrame Encryption
				uint8_t x0 = DataFrame & 0xFF;
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <SysTick_Handler+0x3b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
				uint8_t x1 = (DataFrame >> 8) & 0xFF;
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <SysTick_Handler+0x3b8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
				uint8_t x2 = (DataFrame >> 16) & 0xFF;
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <SysTick_Handler+0x3b8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0c1b      	lsrs	r3, r3, #16
 8001312:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
				uint8_t x3 = (DataFrame >> 24) & 0xFF;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <SysTick_Handler+0x3b8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	0e1b      	lsrs	r3, r3, #24
 800131c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
				in[0] = x0;
 8001320:	4a29      	ldr	r2, [pc, #164]	; (80013c8 <SysTick_Handler+0x3bc>)
 8001322:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001326:	7013      	strb	r3, [r2, #0]
				in[1] = x1;
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <SysTick_Handler+0x3bc>)
 800132a:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800132e:	7053      	strb	r3, [r2, #1]
				in[2] = x2;
 8001330:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <SysTick_Handler+0x3bc>)
 8001332:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8001336:	7093      	strb	r3, [r2, #2]
				in[3] = x3;
 8001338:	4a23      	ldr	r2, [pc, #140]	; (80013c8 <SysTick_Handler+0x3bc>)
 800133a:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800133e:	70d3      	strb	r3, [r2, #3]
				for (int i = 4; i < 16; i++){
 8001340:	2304      	movs	r3, #4
 8001342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001346:	e00a      	b.n	800135e <SysTick_Handler+0x352>
					in[i] = 0x00;
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <SysTick_Handler+0x3bc>)
 800134a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800134e:	4413      	add	r3, r2
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
				for (int i = 4; i < 16; i++){
 8001354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001358:	3301      	adds	r3, #1
 800135a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800135e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001362:	2b0f      	cmp	r3, #15
 8001364:	ddf0      	ble.n	8001348 <SysTick_Handler+0x33c>
				}
				struct AES_ctx ctx;
//	   	    	AES_init_ctx_iv(&ctx, key, iv);
//	   	    	AES_CBC_encrypt_buffer(&ctx, in, 16);
				AES_init_ctx(&ctx, key);
 8001366:	463b      	mov	r3, r7
 8001368:	4918      	ldr	r1, [pc, #96]	; (80013cc <SysTick_Handler+0x3c0>)
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f80e 	bl	800038c <AES_init_ctx>
				AES_ECB_encrypt(&ctx, in);
 8001370:	463b      	mov	r3, r7
 8001372:	4915      	ldr	r1, [pc, #84]	; (80013c8 <SysTick_Handler+0x3bc>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fda7 	bl	8000ec8 <AES_ECB_encrypt>

				unlock_flash();							//MEMORY WRITE
 800137a:	f000 f8d5 	bl	8001528 <unlock_flash>
				erase_flash_sector3();
 800137e:	f000 f8f3 	bl	8001568 <erase_flash_sector3>
				write_flash(KEYADDR, RC_in);
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <SysTick_Handler+0x3a8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4619      	mov	r1, r3
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <SysTick_Handler+0x3c4>)
 800138a:	f000 f91d 	bl	80015c8 <write_flash>
				lock_flash();
 800138e:	f000 f8dd 	bl	800154c <lock_flash>

				//Enable TX interrupt
				USART3->CR1 |= (1 << 7); //tx interrupt
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <SysTick_Handler+0x3c8>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <SysTick_Handler+0x3c8>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800139e:	b662      	cpsie	i
	   		}
	}
	__enable_irq();
}
 80013a0:	bf00      	nop
 80013a2:	37d8      	adds	r7, #216	; 0xd8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000030 	.word	0x20000030
 80013ac:	20000031 	.word	0x20000031
 80013b0:	20000032 	.word	0x20000032
 80013b4:	20000000 	.word	0x20000000
 80013b8:	2000008c 	.word	0x2000008c
 80013bc:	20000038 	.word	0x20000038
 80013c0:	20000090 	.word	0x20000090
 80013c4:	20000034 	.word	0x20000034
 80013c8:	20000050 	.word	0x20000050
 80013cc:	20000004 	.word	0x20000004
 80013d0:	0800c000 	.word	0x0800c000
 80013d4:	40004800 	.word	0x40004800

080013d8 <USART2_IRQHandler>:
/*************************************************
* UART2 interrupt handler -- (RX)
*************************************************/

void USART2_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	if (USART2->SR & (1 << 5)){
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <USART2_IRQHandler+0x4c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01b      	beq.n	8001420 <USART2_IRQHandler+0x48>
	    if (bufpos_rx < 16 ) {
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <USART2_IRQHandler+0x50>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	dc0b      	bgt.n	8001408 <USART2_IRQHandler+0x30>
	    	DataFbuf_rx[bufpos_rx] = USART2->DR;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <USART2_IRQHandler+0x4c>)
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <USART2_IRQHandler+0x50>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b2d1      	uxtb	r1, r2
 80013fa:	4a0c      	ldr	r2, [pc, #48]	; (800142c <USART2_IRQHandler+0x54>)
 80013fc:	54d1      	strb	r1, [r2, r3]
	    	bufpos_rx++;
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <USART2_IRQHandler+0x50>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	4a08      	ldr	r2, [pc, #32]	; (8001428 <USART2_IRQHandler+0x50>)
 8001406:	6013      	str	r3, [r2, #0]
	    }
	    if (bufpos_rx == 16 ){
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <USART2_IRQHandler+0x50>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d107      	bne.n	8001420 <USART2_IRQHandler+0x48>
	    	//USART2->CR1 &= (uint32_t)~(1 << 5);
	    	bufpos_rx = 0;
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <USART2_IRQHandler+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
	    	rx_complete = 1;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <USART2_IRQHandler+0x58>)
 8001418:	2201      	movs	r2, #1
 800141a:	601a      	str	r2, [r3, #0]
	    	Decryption_rx();
 800141c:	f000 fa9e 	bl	800195c <Decryption_rx>
	    }
	}
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40004400 	.word	0x40004400
 8001428:	2000004c 	.word	0x2000004c
 800142c:	2000007c 	.word	0x2000007c
 8001430:	20000044 	.word	0x20000044

08001434 <USART3_IRQHandler>:
/*************************************************
* UART3 interrupt handler -- (TX)
*************************************************/

void USART3_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
	for(int i = 0; i < 16; i++ ){
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	e00b      	b.n	8001458 <USART3_IRQHandler+0x24>
		DataFbuf_tx[i] = in[i];
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <USART3_IRQHandler+0x90>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	7819      	ldrb	r1, [r3, #0]
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <USART3_IRQHandler+0x94>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	460a      	mov	r2, r1
 8001450:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 16; i++ ){
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3301      	adds	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	ddf0      	ble.n	8001440 <USART3_IRQHandler+0xc>
	}

	if (USART3->SR & (1 << 7)) {
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <USART3_IRQHandler+0x98>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001466:	2b00      	cmp	r3, #0
 8001468:	d028      	beq.n	80014bc <USART3_IRQHandler+0x88>
	        // clear interrupt
	        USART3->SR &= (uint32_t)~(1 << 7);
 800146a:	4b18      	ldr	r3, [pc, #96]	; (80014cc <USART3_IRQHandler+0x98>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <USART3_IRQHandler+0x98>)
 8001470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001474:	6013      	str	r3, [r2, #0]


	        	if (bufpos_tx == 16) {
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <USART3_IRQHandler+0x9c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b10      	cmp	r3, #16
 800147c:	d10c      	bne.n	8001498 <USART3_IRQHandler+0x64>
	        		// buffer is flushed out, disable tx interrupt
	        		tx_complete = 1;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <USART3_IRQHandler+0xa0>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]
	        		bufpos_tx = 0;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <USART3_IRQHandler+0x9c>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
	        		USART3->CR1 &= (uint32_t)~(1 << 7);
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <USART3_IRQHandler+0x98>)
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <USART3_IRQHandler+0x98>)
 8001490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001494:	60d3      	str	r3, [r2, #12]
	        		delay_ms(100); //0.01s
	        		bufpos_tx++;
	        		tx_complete = 0;
	        	}
	}
}
 8001496:	e011      	b.n	80014bc <USART3_IRQHandler+0x88>
	        		USART3->DR = DataFbuf_tx[bufpos_tx];
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <USART3_IRQHandler+0x9c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <USART3_IRQHandler+0x94>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <USART3_IRQHandler+0x98>)
 80014a4:	605a      	str	r2, [r3, #4]
	        		delay_ms(100); //0.01s
 80014a6:	2064      	movs	r0, #100	; 0x64
 80014a8:	f000 fa40 	bl	800192c <delay_ms>
	        		bufpos_tx++;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <USART3_IRQHandler+0x9c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <USART3_IRQHandler+0x9c>)
 80014b4:	6013      	str	r3, [r2, #0]
	        		tx_complete = 0;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <USART3_IRQHandler+0xa0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000050 	.word	0x20000050
 80014c8:	20000060 	.word	0x20000060
 80014cc:	40004800 	.word	0x40004800
 80014d0:	20000048 	.word	0x20000048
 80014d4:	20000040 	.word	0x20000040

080014d8 <init_systick>:

/*************************************************
* initialize SysTick
*************************************************/
void init_systick(uint32_t s, uint8_t cen)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
    // Clear CTRL register
    SysTick->CTRL = 0x00000;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <init_systick+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
    // Main clock source is running with HSI by default which is at 8 Mhz.
    // SysTick clock source can be set with CTRL register (Bit 2)
    // 0: Processor clock/8 (AHB/8)
    // 1: Processor clock (AHB)
    SysTick->CTRL |= (0 << 2);
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <init_systick+0x4c>)
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <init_systick+0x4c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6013      	str	r3, [r2, #0]
    // Enable callback (bit 1)
    SysTick->CTRL |= ((uint32_t)cen << 1);
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <init_systick+0x4c>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <init_systick+0x4c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	600b      	str	r3, [r1, #0]
    // Load the value
    SysTick->LOAD = s;
 8001500:	4a08      	ldr	r2, [pc, #32]	; (8001524 <init_systick+0x4c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6053      	str	r3, [r2, #4]
    // Set the current value to 0
    SysTick->VAL = 0;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <init_systick+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
    // Enable SysTick (bit 0)
    SysTick->CTRL |= (1 << 0);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <init_systick+0x4c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <init_systick+0x4c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <unlock_flash>:

/*************************************************
* MEMORY
*************************************************/

void unlock_flash(){
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	FLASH -> KEYR = KEY1;
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <unlock_flash+0x18>)
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <unlock_flash+0x1c>)
 8001530:	605a      	str	r2, [r3, #4]
	FLASH -> KEYR = KEY2;
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <unlock_flash+0x18>)
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <unlock_flash+0x20>)
 8001536:	605a      	str	r2, [r3, #4]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40023c00 	.word	0x40023c00
 8001544:	45670123 	.word	0x45670123
 8001548:	cdef89ab 	.word	0xcdef89ab

0800154c <lock_flash>:

void lock_flash() {
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
    FLASH->CR |= FLASH_CR_LOCK; // bit 31
 8001550:	4b04      	ldr	r3, [pc, #16]	; (8001564 <lock_flash+0x18>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <lock_flash+0x18>)
 8001556:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800155a:	6113      	str	r3, [r2, #16]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40023c00 	.word	0x40023c00

08001568 <erase_flash_sector3>:

void erase_flash_sector3() {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
    const uint32_t sec = 3;
 800156e:	2303      	movs	r3, #3
 8001570:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001572:	b672      	cpsid	i
    __disable_irq();
    while(FLASH->SR & FLASH_SR_BSY); // check if busy
 8001574:	bf00      	nop
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <erase_flash_sector3+0x5c>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <erase_flash_sector3+0xe>
    FLASH->CR |= FLASH_CR_SER;
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <erase_flash_sector3+0x5c>)
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <erase_flash_sector3+0x5c>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= (sec << 3); // SNB bit 3:6
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <erase_flash_sector3+0x5c>)
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	490b      	ldr	r1, [pc, #44]	; (80015c4 <erase_flash_sector3+0x5c>)
 8001598:	4313      	orrs	r3, r2
 800159a:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT; // start
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <erase_flash_sector3+0x5c>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4a08      	ldr	r2, [pc, #32]	; (80015c4 <erase_flash_sector3+0x5c>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6113      	str	r3, [r2, #16]
    while(FLASH->SR & FLASH_SR_BSY); // check if busy
 80015a8:	bf00      	nop
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <erase_flash_sector3+0x5c>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <erase_flash_sector3+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 80015b6:	b662      	cpsie	i
    __enable_irq();
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <write_flash>:

void write_flash(uint32_t addr, uint32_t datai){
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    while(FLASH->SR & FLASH_SR_BSY); // check if busy
 80015d2:	bf00      	nop
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <write_flash+0x5c>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f9      	bne.n	80015d4 <write_flash+0xc>
    FLASH->CR |= FLASH_CR_PG;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <write_flash+0x5c>)
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <write_flash+0x5c>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6113      	str	r3, [r2, #16]
    FLASH->CR &= ~(0x3U << 8); // clear PSIZE bit 8:9
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <write_flash+0x5c>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <write_flash+0x5c>)
 80015f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f6:	6113      	str	r3, [r2, #16]
    FLASH->CR |= (0x2 << 8);   // program PSIZE
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <write_flash+0x5c>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a09      	ldr	r2, [pc, #36]	; (8001624 <write_flash+0x5c>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001602:	6113      	str	r3, [r2, #16]
    *(volatile uint32_t*)addr = datai;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	601a      	str	r2, [r3, #0]
    while(FLASH->SR & FLASH_SR_BSY); // check if busy
 800160a:	bf00      	nop
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <write_flash+0x5c>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <write_flash+0x44>
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <read_flash>:

void read_flash(uint32_t addr){
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    while(FLASH->SR & FLASH_SR_BSY); // check if busy
 8001630:	bf00      	nop
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <read_flash+0x60>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <read_flash+0xa>
    FLASH->CR |= FLASH_CR_PG;
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <read_flash+0x60>)
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <read_flash+0x60>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6113      	str	r3, [r2, #16]
    FLASH->CR &= ~(0x3U << 8); // clear PSIZE bit 8:9
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <read_flash+0x60>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <read_flash+0x60>)
 8001650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001654:	6113      	str	r3, [r2, #16]
    FLASH->CR |= (0x2 << 8);   // program PSIZE
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <read_flash+0x60>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <read_flash+0x60>)
 800165c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001660:	6113      	str	r3, [r2, #16]
    volatile uint32_t *bridge  = addr;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]
    mem_datao= *bridge;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a08      	ldr	r2, [pc, #32]	; (800168c <read_flash+0x64>)
 800166c:	6013      	str	r3, [r2, #0]
    while(FLASH->SR & FLASH_SR_BSY); // check if busy
 800166e:	bf00      	nop
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <read_flash+0x60>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1f9      	bne.n	8001670 <read_flash+0x48>
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00
 800168c:	20000078 	.word	0x20000078

08001690 <main>:

/*************************************************
* main code starts from here
*************************************************/
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= 0x0000000B;
 8001696:	4b99      	ldr	r3, [pc, #612]	; (80018fc <main+0x26c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a98      	ldr	r2, [pc, #608]	; (80018fc <main+0x26c>)
 800169c:	f043 030b 	orr.w	r3, r3, #11
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
    // enable SYSCFG clock (APB2ENR: bit 14) | enable TIM2 clock (bit0)
    RCC->APB2ENR |= (1 << 14);				//for ext interrupt
 80016a2:	4b96      	ldr	r3, [pc, #600]	; (80018fc <main+0x26c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a95      	ldr	r2, [pc, #596]	; (80018fc <main+0x26c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
    RCC->APB1ENR |= ((1 << 18) | (1 << 0));	// USART3 & timer
 80016ae:	4b93      	ldr	r3, [pc, #588]	; (80018fc <main+0x26c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a92      	ldr	r2, [pc, #584]	; (80018fc <main+0x26c>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB1ENR |= (1 << 17); 				//USART2
 80016be:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <main+0x26c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a8e      	ldr	r2, [pc, #568]	; (80018fc <main+0x26c>)
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOD->MODER &= 0x00FFFFFF;		//LEDs
 80016ca:	4b8d      	ldr	r3, [pc, #564]	; (8001900 <main+0x270>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a8c      	ldr	r2, [pc, #560]	; (8001900 <main+0x270>)
 80016d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016d4:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= 0x55000000;
 80016d6:	4b8a      	ldr	r3, [pc, #552]	; (8001900 <main+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a89      	ldr	r2, [pc, #548]	; (8001900 <main+0x270>)
 80016dc:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80016e0:	6013      	str	r3, [r2, #0]

    // set pin modes as alternate mode 7 (pins 2 and 3)
    GPIOA->MODER &= 0xFFFFFF0F; // clear old values
 80016e2:	4b88      	ldr	r3, [pc, #544]	; (8001904 <main+0x274>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a87      	ldr	r2, [pc, #540]	; (8001904 <main+0x274>)
 80016e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016ec:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= 0x000000A0; // Set pin 2/3 to alternate func. mode (0b10)
 80016ee:	4b85      	ldr	r3, [pc, #532]	; (8001904 <main+0x274>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a84      	ldr	r2, [pc, #528]	; (8001904 <main+0x274>)
 80016f4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80016f8:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (2 << 16); // gpıod alt func
 80016fa:	4b81      	ldr	r3, [pc, #516]	; (8001900 <main+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a80      	ldr	r2, [pc, #512]	; (8001900 <main+0x270>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6013      	str	r3, [r2, #0]
    // set pin modes as high speed
    GPIOA->OSPEEDR |= 0x000000A0; // Set pin 2/3 to high speed mode (0b10)
 8001706:	4b7f      	ldr	r3, [pc, #508]	; (8001904 <main+0x274>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	4a7e      	ldr	r2, [pc, #504]	; (8001904 <main+0x274>)
 800170c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001710:	6093      	str	r3, [r2, #8]
    GPIOD->OSPEEDR |= (2 << 16);
 8001712:	4b7b      	ldr	r3, [pc, #492]	; (8001900 <main+0x270>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <main+0x270>)
 8001718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171c:	6093      	str	r3, [r2, #8]
    // choose AF7 for USART2 in Alternate Function registers
    GPIOD->AFR[1] |= (0x7 << 0); // for pin PD8 for USART3 TX
 800171e:	4b78      	ldr	r3, [pc, #480]	; (8001900 <main+0x270>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	4a77      	ldr	r2, [pc, #476]	; (8001900 <main+0x270>)
 8001724:	f043 0307 	orr.w	r3, r3, #7
 8001728:	6253      	str	r3, [r2, #36]	; 0x24
    GPIOA->AFR[0] |= (0x7 << 12); // for pin PA3 for USART2 RX
 800172a:	4b76      	ldr	r3, [pc, #472]	; (8001904 <main+0x274>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a75      	ldr	r2, [pc, #468]	; (8001904 <main+0x274>)
 8001730:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001734:	6213      	str	r3, [r2, #32]


    uint32_t source_adr = 0x44;		//68
 8001736:	2344      	movs	r3, #68	; 0x44
 8001738:	607b      	str	r3, [r7, #4]
    uint32_t dest_adr = 0x05;		//5
 800173a:	2305      	movs	r3, #5
 800173c:	603b      	str	r3, [r7, #0]
    DataTemplate = ((dest_adr << 16) | (source_adr << 8));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	4313      	orrs	r3, r2
 8001748:	4a6f      	ldr	r2, [pc, #444]	; (8001908 <main+0x278>)
 800174a:	6013      	str	r3, [r2, #0]


    // Light up LEDs for 1 sec
    GPIOD->ODR &= 0x0000;
 800174c:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <main+0x270>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <main+0x270>)
 8001752:	2200      	movs	r2, #0
 8001754:	615a      	str	r2, [r3, #20]
    GPIOD->ODR |= 0xF000;
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <main+0x270>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4a69      	ldr	r2, [pc, #420]	; (8001900 <main+0x270>)
 800175c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8001760:	6153      	str	r3, [r2, #20]
    delay_ms(1000000);
 8001762:	486a      	ldr	r0, [pc, #424]	; (800190c <main+0x27c>)
 8001764:	f000 f8e2 	bl	800192c <delay_ms>
    GPIOD->ODR &= 0x0000;
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <main+0x270>)
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	4b64      	ldr	r3, [pc, #400]	; (8001900 <main+0x270>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]

    // * EXT INTERRUPT * //
    SYSCFG->EXTICR[0] |= 0x00000000;
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <main+0x280>)
 8001774:	4a66      	ldr	r2, [pc, #408]	; (8001910 <main+0x280>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	6093      	str	r3, [r2, #8]
    // Choose either rising edge trigger (RTSR) or falling edge trigger (FTSR)
    EXTI->RTSR |= 0x00001;   // Enable rising edge trigger on EXTI0
 800177a:	4b66      	ldr	r3, [pc, #408]	; (8001914 <main+0x284>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4a65      	ldr	r2, [pc, #404]	; (8001914 <main+0x284>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6093      	str	r3, [r2, #8]
    EXTI->FTSR |= 0x00001;
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <main+0x284>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4a62      	ldr	r2, [pc, #392]	; (8001914 <main+0x284>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	60d3      	str	r3, [r2, #12]
    // Mask the used external interrupt numbers.
    EXTI->IMR |= 0x00001;    // Mask EXTI0
 8001792:	4b60      	ldr	r3, [pc, #384]	; (8001914 <main+0x284>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <main+0x284>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6013      	str	r3, [r2, #0]
    // Set Priority for each interrupt request
    NVIC->IP[EXTI0_IRQn] = 0x10; // Priority level 1
 800179e:	4b5e      	ldr	r3, [pc, #376]	; (8001918 <main+0x288>)
 80017a0:	2210      	movs	r2, #16
 80017a2:	f883 2306 	strb.w	r2, [r3, #774]	; 0x306
    // enable EXT0 IRQ from NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 80017a6:	2006      	movs	r0, #6
 80017a8:	f7ff fbaa 	bl	8000f00 <__NVIC_EnableIRQ>


    // * SysTick * //
    /* set system clock to 168 Mhz */
    set_sysclk_to_168();
 80017ac:	f000 f9e0 	bl	8001b70 <set_sysclk_to_168>
    // configure SysTick to interrupt every 21k ticks
    // when SysClk is configured to 168MHz,
    // SysTick will be running at 168Mhz/8 = 21Mhz speed
    // passing 21000 here will give us 1ms ticks
    // enable callback
    init_systick(16777215, 1);
 80017b0:	2101      	movs	r1, #1
 80017b2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80017b6:	f7ff fe8f 	bl	80014d8 <init_systick>
    //   thus 168M/4 * 2 = 84Mhz
    // set prescaler to 83999
    //   it will increment counter every prescalar cycles
    // fCK_PSC / (PSC[15:0] + 1)
    // 84 Mhz / 8399 + 1 = 10 khz timer clock speed
    TIM2->PSC = 8399;
 80017ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017be:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
    // Set the auto-reload value to 10000
    //   which should give 1 second timer interrupts
    TIM2->ARR = 500; // 0.05s
 80017c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
    // Update Interrupt Enable
    TIM2->DIER |= (1 << 0);
 80017ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	60d3      	str	r3, [r2, #12]
    // enable TIM2 IRQ from NVIC
    NVIC_EnableIRQ(TIM2_IRQn);
 80017de:	201c      	movs	r0, #28
 80017e0:	f7ff fb8e 	bl	8000f00 <__NVIC_EnableIRQ>
    // Enable Timer 2 module (CEN, bit0)
    TIM2->CR1 |= (1 << 0);
 80017e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6013      	str	r3, [r2, #0]


    // * USART3 TX * //
    // usart3 tx enable, RE bit 2
    USART3->CR1 |= (1 << 3);
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <main+0x28c>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a48      	ldr	r2, [pc, #288]	; (800191c <main+0x28c>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	60d3      	str	r3, [r2, #12]
    USART3->BRR |= (22 << 4);
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <main+0x28c>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a45      	ldr	r2, [pc, #276]	; (800191c <main+0x28c>)
 8001806:	f443 73b0 	orr.w	r3, r3, #352	; 0x160
 800180a:	6093      	str	r3, [r2, #8]
    USART3->BRR |= 13;
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <main+0x28c>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	4a42      	ldr	r2, [pc, #264]	; (800191c <main+0x28c>)
 8001812:	f043 030d 	orr.w	r3, r3, #13
 8001816:	6093      	str	r3, [r2, #8]
    // usar3 word length M, bit 12
    USART3->CR1 |= (0 << 12); // 0 - 1,8,n
 8001818:	4b40      	ldr	r3, [pc, #256]	; (800191c <main+0x28c>)
 800181a:	4a40      	ldr	r2, [pc, #256]	; (800191c <main+0x28c>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	60d3      	str	r3, [r2, #12]
    // usart3 parity control, bit 9
    USART3->CR1 |= (0 << 10); // 0 - no parity
 8001820:	4b3e      	ldr	r3, [pc, #248]	; (800191c <main+0x28c>)
 8001822:	4a3e      	ldr	r2, [pc, #248]	; (800191c <main+0x28c>)
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	60d3      	str	r3, [r2, #12]
    //usart3 number of stop bits
    USART3->CR2 |= (0 << 12);  // 0 - 1 stop bit
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <main+0x28c>)
 800182a:	4a3c      	ldr	r2, [pc, #240]	; (800191c <main+0x28c>)
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	6113      	str	r3, [r2, #16]
    // enable usart3 - UE, bit 13
    USART3->CR1 |= (1 << 13);
 8001830:	4b3a      	ldr	r3, [pc, #232]	; (800191c <main+0x28c>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4a39      	ldr	r2, [pc, #228]	; (800191c <main+0x28c>)
 8001836:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800183a:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(USART3_IRQn);
 800183c:	2027      	movs	r0, #39	; 0x27
 800183e:	f7ff fb5f 	bl	8000f00 <__NVIC_EnableIRQ>


    // * USART2 RX * //
    //usart3 rx enable, TE bit 3
    USART2->CR1 |= (1 << 2);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <main+0x290>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	4a36      	ldr	r2, [pc, #216]	; (8001920 <main+0x290>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	60d3      	str	r3, [r2, #12]
    //baud rate initialization
    USART2->BRR |= (22 << 4);
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <main+0x290>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4a33      	ldr	r2, [pc, #204]	; (8001920 <main+0x290>)
 8001854:	f443 73b0 	orr.w	r3, r3, #352	; 0x160
 8001858:	6093      	str	r3, [r2, #8]
    USART2->BRR |= 13;
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <main+0x290>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4a30      	ldr	r2, [pc, #192]	; (8001920 <main+0x290>)
 8001860:	f043 030d 	orr.w	r3, r3, #13
 8001864:	6093      	str	r3, [r2, #8]
    //usart3 word length M, bit 12
    USART2->CR1 |= (0 << 12); // 0 - 1,8,n
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <main+0x290>)
 8001868:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <main+0x290>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60d3      	str	r3, [r2, #12]
    //usart3 parity control, bit 9
    USART2->CR1 |= (0 << 10); // 0 - no parity
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <main+0x290>)
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <main+0x290>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60d3      	str	r3, [r2, #12]
    //usart3 number of stop bits
    USART2->CR2 |= (0 << 12);  // 0 - 1 stop bit
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <main+0x290>)
 8001878:	4a29      	ldr	r2, [pc, #164]	; (8001920 <main+0x290>)
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	6113      	str	r3, [r2, #16]
    //enable usart2 - UE, bit 13
    USART2->CR1 |= (1 << 13);
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <main+0x290>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <main+0x290>)
 8001884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001888:	60d3      	str	r3, [r2, #12]
    //enable rx interrupt
    USART2->CR1 |= (1 << 5);
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <main+0x290>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	4a24      	ldr	r2, [pc, #144]	; (8001920 <main+0x290>)
 8001890:	f043 0320 	orr.w	r3, r3, #32
 8001894:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(USART2_IRQn);
 8001896:	2026      	movs	r0, #38	; 0x26
 8001898:	f7ff fb32 	bl	8000f00 <__NVIC_EnableIRQ>


    // * IWDG * //
    //Enable iwdg
    IWDG->KR |= 0xcccc;
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <main+0x294>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <main+0x294>)
 80018a2:	f443 434c 	orr.w	r3, r3, #52224	; 0xcc00
 80018a6:	f043 03cc 	orr.w	r3, r3, #204	; 0xcc
 80018aa:	6013      	str	r3, [r2, #0]
    //remove iwdg register protection
    IWDG->KR |= 0X5555;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <main+0x294>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <main+0x294>)
 80018b2:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80018b6:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80018ba:	6013      	str	r3, [r2, #0]
    //Arrange prescaler
    IWDG->PR |= (3 << 0); // writing "011", enables divider 32 & 4096ms
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <main+0x294>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a18      	ldr	r2, [pc, #96]	; (8001924 <main+0x294>)
 80018c2:	f043 0303 	orr.w	r3, r3, #3
 80018c6:	6053      	str	r3, [r2, #4]
    //reload iwdg counter
    IWDG->RLR = 0xfff; // load to max value (4096ms)
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <main+0x294>)
 80018ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80018ce:	609a      	str	r2, [r3, #8]
    IWDG->KR |= 0xaaaa; //refresh the counter & disable wwdg
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <main+0x294>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a13      	ldr	r2, [pc, #76]	; (8001924 <main+0x294>)
 80018d6:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 80018da:	f043 03aa 	orr.w	r3, r3, #170	; 0xaa
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	b662      	cpsie	i
//    write_flash(KEYADDR, RC_in);
//    lock_flash();

    // * SLEEP MODE * //
    __enable_irq();
    SCB->SCR |= (1 << 1); //Sleep on exit
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <main+0x298>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <main+0x298>)
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	6113      	str	r3, [r2, #16]
    __WFI();
 80018ee:	bf30      	wfi
 80018f0:	2300      	movs	r3, #0

}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40020000 	.word	0x40020000
 8001908:	20000090 	.word	0x20000090
 800190c:	000f4240 	.word	0x000f4240
 8001910:	40013800 	.word	0x40013800
 8001914:	40013c00 	.word	0x40013c00
 8001918:	e000e100 	.word	0xe000e100
 800191c:	40004800 	.word	0x40004800
 8001920:	40004400 	.word	0x40004400
 8001924:	40003000 	.word	0x40003000
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <delay_ms>:

void delay_ms(volatile uint32_t s)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
    tDelay = s;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a08      	ldr	r2, [pc, #32]	; (8001958 <delay_ms+0x2c>)
 8001938:	6013      	str	r3, [r2, #0]
    while(tDelay != 0){
 800193a:	e004      	b.n	8001946 <delay_ms+0x1a>
    	tDelay--;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <delay_ms+0x2c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <delay_ms+0x2c>)
 8001944:	6013      	str	r3, [r2, #0]
    while(tDelay != 0){
 8001946:	4b04      	ldr	r3, [pc, #16]	; (8001958 <delay_ms+0x2c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f6      	bne.n	800193c <delay_ms+0x10>
    }
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000074 	.word	0x20000074

0800195c <Decryption_rx>:

void Decryption_rx()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b0b2      	sub	sp, #200	; 0xc8
 8001960:	af00      	add	r7, sp, #0
	struct AES_ctx ctx;
	//AES_init_ctx_iv(&ctx, key, iv);
	//AES_CBC_decrypt_buffer(&ctx, DataFbuf_rx, 16);
	AES_init_ctx(&ctx, key);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4916      	ldr	r1, [pc, #88]	; (80019c0 <Decryption_rx+0x64>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7fe fd10 	bl	800038c <AES_init_ctx>
	AES_ECB_decrypt(&ctx, DataFbuf_rx);
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4915      	ldr	r1, [pc, #84]	; (80019c4 <Decryption_rx+0x68>)
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fab7 	bl	8000ee4 <AES_ECB_decrypt>

	for(int z=0; z<4; z++){
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800197c:	e016      	b.n	80019ac <Decryption_rx+0x50>
		DataFrame_rx |= (DataFbuf_rx[z] << (8*z));
 800197e:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <Decryption_rx+0x68>)
 8001980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	461a      	mov	r2, r3
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <Decryption_rx+0x6c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <Decryption_rx+0x6c>)
 80019a0:	6013      	str	r3, [r2, #0]
	for(int z=0; z<4; z++){
 80019a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019a6:	3301      	adds	r3, #1
 80019a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80019ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	dde4      	ble.n	800197e <Decryption_rx+0x22>
	}

	CommandLEDs();
 80019b4:	f000 f80a 	bl	80019cc <CommandLEDs>
}
 80019b8:	bf00      	nop
 80019ba:	37c8      	adds	r7, #200	; 0xc8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000004 	.word	0x20000004
 80019c4:	2000007c 	.word	0x2000007c
 80019c8:	20000070 	.word	0x20000070

080019cc <CommandLEDs>:

void CommandLEDs(){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0

	identifier_rx = (DataFrame_rx & 0xFF);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <CommandLEDs+0xe4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <CommandLEDs+0xe8>)
 80019da:	701a      	strb	r2, [r3, #0]
	Rcode_rx = ((DataFrame_rx >> 24) & 0xFF);
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <CommandLEDs+0xe4>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0e1b      	lsrs	r3, r3, #24
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <CommandLEDs+0xec>)
 80019e6:	6013      	str	r3, [r2, #0]
	//Rcode_rx = 5;

	if(Rcode_rx == Rcode){
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <CommandLEDs+0xec>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <CommandLEDs+0xf0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d135      	bne.n	8001a60 <CommandLEDs+0x94>
		// identify the command
		if(identifier_rx == 1){
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <CommandLEDs+0xe8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10c      	bne.n	8001a18 <CommandLEDs+0x4c>
			GPIOD->ODR ^= (uint16_t)(1 << 12);	//GREEN
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	4a2f      	ldr	r2, [pc, #188]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a08:	6153      	str	r3, [r2, #20]
			identifier_rx = 0;
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <CommandLEDs+0xe8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
			DataFrame_rx = 0;
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <CommandLEDs+0xe4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
		//Rcode_rx = 0;
		IWDG->KR |= 0X5555;
		IWDG->RLR = 0x01;
	}
	//Rcode_rx = 0;
}
 8001a16:	e046      	b.n	8001aa6 <CommandLEDs+0xda>
		else if(identifier_rx == 2){
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <CommandLEDs+0xe8>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d10c      	bne.n	8001a3c <CommandLEDs+0x70>
			GPIOD->ODR ^= (uint16_t)(1 << 13);	//ORANGE
 8001a22:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a2c:	6153      	str	r3, [r2, #20]
			identifier_rx = 0;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <CommandLEDs+0xe8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			DataFrame_rx = 0;
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <CommandLEDs+0xe4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	e034      	b.n	8001aa6 <CommandLEDs+0xda>
		else if(identifier_rx >= 16){
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <CommandLEDs+0xe8>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b0f      	cmp	r3, #15
 8001a44:	d92f      	bls.n	8001aa6 <CommandLEDs+0xda>
			GPIOD->ODR ^= (uint16_t)(1 << 15);	//BLUE
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a4c:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 8001a50:	6153      	str	r3, [r2, #20]
			identifier_rx = 0;
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <CommandLEDs+0xe8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
			DataFrame_rx = 0;
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <CommandLEDs+0xe4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
}
 8001a5e:	e022      	b.n	8001aa6 <CommandLEDs+0xda>
		for(int s=0; s<20; s++){
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	e00b      	b.n	8001a7e <CommandLEDs+0xb2>
			GPIOD->ODR ^= (uint16_t)(1 << 14);	//red
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a15      	ldr	r2, [pc, #84]	; (8001ac0 <CommandLEDs+0xf4>)
 8001a6c:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8001a70:	6153      	str	r3, [r2, #20]
			delay_ms(250000);
 8001a72:	4814      	ldr	r0, [pc, #80]	; (8001ac4 <CommandLEDs+0xf8>)
 8001a74:	f7ff ff5a 	bl	800192c <delay_ms>
		for(int s=0; s<20; s++){
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b13      	cmp	r3, #19
 8001a82:	ddf0      	ble.n	8001a66 <CommandLEDs+0x9a>
		identifier_rx = 0;
 8001a84:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <CommandLEDs+0xe8>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
		DataFrame_rx = 0;
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <CommandLEDs+0xe4>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
		IWDG->KR |= 0X5555;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <CommandLEDs+0xfc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <CommandLEDs+0xfc>)
 8001a96:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001a9a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001a9e:	6013      	str	r3, [r2, #0]
		IWDG->RLR = 0x01;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <CommandLEDs+0xfc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	609a      	str	r2, [r3, #8]
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000070 	.word	0x20000070
 8001ab4:	20000094 	.word	0x20000094
 8001ab8:	2000003c 	.word	0x2000003c
 8001abc:	20000038 	.word	0x20000038
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	0003d090 	.word	0x0003d090
 8001ac8:	40003000 	.word	0x40003000

08001acc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001acc:	480d      	ldr	r0, [pc, #52]	; (8001b04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ace:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <LoopForever+0xe>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae8:	4c0b      	ldr	r4, [pc, #44]	; (8001b18 <LoopForever+0x16>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001af6:	f000 f813 	bl	8001b20 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001afa:	f000 f897 	bl	8001c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7ff fdc7 	bl	8001690 <main>

08001b02 <LoopForever>:

LoopForever:
    b LoopForever
 8001b02:	e7fe      	b.n	8001b02 <LoopForever>
  ldr   r0, =_estack
 8001b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b10:	08001ea0 	.word	0x08001ea0
  ldr r2, =_sbss
 8001b14:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b18:	20000098 	.word	0x20000098

08001b1c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <SystemInit>:

/*************************************************
* reset clock to HSI
*************************************************/
void SystemInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <SystemInit+0x48>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <SystemInit+0x48>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <SystemInit+0x48>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <SystemInit+0x48>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <SystemInit+0x48>)
 8001b3c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <SystemInit+0x48>)
 8001b48:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <SystemInit+0x4c>)
 8001b4a:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x48>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <SystemInit+0x48>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <SystemInit+0x48>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	24003010 	.word	0x24003010

08001b70 <set_sysclk_to_168>:
/*************************************************
* configure system clock to 168 Mhz
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_168(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 8001b74:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a28      	ldr	r2, [pc, #160]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 8001b80:	bf00      	nop
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f9      	beq.n	8001b82 <set_sysclk_to_168+0x12>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <set_sysclk_to_168+0xb0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <set_sysclk_to_168+0xb0>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001ba8:	4a1c      	ldr	r2, [pc, #112]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bb4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001bb8:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc4:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bc8:	4a16      	ldr	r2, [pc, #88]	; (8001c24 <set_sysclk_to_168+0xb4>)
 8001bca:	605a      	str	r2, [r3, #4]
				   (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 8001bd8:	bf00      	nop
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f9      	beq.n	8001bda <set_sysclk_to_168+0x6a>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <set_sysclk_to_168+0xb8>)
 8001be8:	f240 7205 	movw	r2, #1797	; 0x705
 8001bec:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bf4:	f023 0303 	bic.w	r3, r3, #3
 8001bf8:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8001c06:	bf00      	nop
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <set_sysclk_to_168+0xac>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f9      	beq.n	8001c08 <set_sysclk_to_168+0x98>
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000
 8001c24:	07405408 	.word	0x07405408
 8001c28:	40023c00 	.word	0x40023c00

08001c2c <__libc_init_array>:
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	4e0d      	ldr	r6, [pc, #52]	; (8001c64 <__libc_init_array+0x38>)
 8001c30:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <__libc_init_array+0x3c>)
 8001c32:	1ba4      	subs	r4, r4, r6
 8001c34:	10a4      	asrs	r4, r4, #2
 8001c36:	2500      	movs	r5, #0
 8001c38:	42a5      	cmp	r5, r4
 8001c3a:	d109      	bne.n	8001c50 <__libc_init_array+0x24>
 8001c3c:	4e0b      	ldr	r6, [pc, #44]	; (8001c6c <__libc_init_array+0x40>)
 8001c3e:	4c0c      	ldr	r4, [pc, #48]	; (8001c70 <__libc_init_array+0x44>)
 8001c40:	f000 f818 	bl	8001c74 <_init>
 8001c44:	1ba4      	subs	r4, r4, r6
 8001c46:	10a4      	asrs	r4, r4, #2
 8001c48:	2500      	movs	r5, #0
 8001c4a:	42a5      	cmp	r5, r4
 8001c4c:	d105      	bne.n	8001c5a <__libc_init_array+0x2e>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c54:	4798      	blx	r3
 8001c56:	3501      	adds	r5, #1
 8001c58:	e7ee      	b.n	8001c38 <__libc_init_array+0xc>
 8001c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c5e:	4798      	blx	r3
 8001c60:	3501      	adds	r5, #1
 8001c62:	e7f2      	b.n	8001c4a <__libc_init_array+0x1e>
 8001c64:	08001e98 	.word	0x08001e98
 8001c68:	08001e98 	.word	0x08001e98
 8001c6c:	08001e98 	.word	0x08001e98
 8001c70:	08001e9c 	.word	0x08001e9c

08001c74 <_init>:
 8001c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c76:	bf00      	nop
 8001c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c7a:	bc08      	pop	{r3}
 8001c7c:	469e      	mov	lr, r3
 8001c7e:	4770      	bx	lr

08001c80 <_fini>:
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c82:	bf00      	nop
 8001c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c86:	bc08      	pop	{r3}
 8001c88:	469e      	mov	lr, r3
 8001c8a:	4770      	bx	lr
