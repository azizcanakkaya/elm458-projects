
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002fc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a4  080004ac  000104ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004a4  080004a4  000104ac  2**0
                  CONTENTS
  4 .ARM          00000000  080004a4  080004a4  000104ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a4  080004ac  000104ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a4  080004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004ac  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004ac  00020020  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000104ac  2**0
                  CONTENTS, READONLY
 12 .debug_line   00000d18  00000000  00000000  000104d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000072a  00000000  00000000  000111ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000001d3  00000000  00000000  00011918  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000088  00000000  00000000  00011af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00086068  00000000  00000000  00011b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000060  00000000  00000000  00097be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00018088  00000000  00000000  00097c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000afcc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000118  00000000  00000000  000afd44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800048c 	.word	0x0800048c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800048c 	.word	0x0800048c

080001e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001e8:	480d      	ldr	r0, [pc, #52]	; (8000220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x6>)
  ldr r1, =_edata
 80001ee:	490e      	ldr	r1, [pc, #56]	; (8000228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <LoopForever+0xe>)
  movs r3, #0
 80001f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001f4:	e002      	b.n	80001fc <LoopCopyDataInit>

080001f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001fa:	3304      	adds	r3, #4

080001fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000200:	d3f9      	bcc.n	80001f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000202:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000204:	4c0b      	ldr	r4, [pc, #44]	; (8000234 <LoopForever+0x16>)
  movs r3, #0
 8000206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000208:	e001      	b.n	800020e <LoopFillZerobss>

0800020a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800020a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800020c:	3204      	adds	r2, #4

0800020e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800020e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000210:	d3fb      	bcc.n	800020a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000212:	f000 f813 	bl	800023c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000216:	f000 f915 	bl	8000444 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021a:	f000 f8cf 	bl	80003bc <main>

0800021e <LoopForever>:

LoopForever:
    b LoopForever
 800021e:	e7fe      	b.n	800021e <LoopForever>
  ldr   r0, =_estack
 8000220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000228:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800022c:	080004ac 	.word	0x080004ac
  ldr r2, =_sbss
 8000230:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000234:	20000020 	.word	0x20000020

08000238 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000238:	e7fe      	b.n	8000238 <ADC_IRQHandler>
	...

0800023c <SystemInit>:

/*************************************************
* reset clock to HSI
*************************************************/
void SystemInit(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <SystemInit+0x48>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a0f      	ldr	r2, [pc, #60]	; (8000284 <SystemInit+0x48>)
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 800024c:	4b0d      	ldr	r3, [pc, #52]	; (8000284 <SystemInit+0x48>)
 800024e:	2200      	movs	r2, #0
 8000250:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <SystemInit+0x48>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a0b      	ldr	r2, [pc, #44]	; (8000284 <SystemInit+0x48>)
 8000258:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800025c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000260:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 8000262:	4b08      	ldr	r3, [pc, #32]	; (8000284 <SystemInit+0x48>)
 8000264:	4a08      	ldr	r2, [pc, #32]	; (8000288 <SystemInit+0x4c>)
 8000266:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <SystemInit+0x48>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a05      	ldr	r2, [pc, #20]	; (8000284 <SystemInit+0x48>)
 800026e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000272:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 8000274:	4b03      	ldr	r3, [pc, #12]	; (8000284 <SystemInit+0x48>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	24003010 	.word	0x24003010

0800028c <set_sysclk_to_168>:
/*************************************************
* configure system clock to 168 Mhz
* this is only tested on stm32f4 discovery board
*************************************************/
void set_sysclk_to_168(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	/* Enable HSE (CR: bit 16) */
	RCC->CR |= (1U << 16);
 8000290:	4b29      	ldr	r3, [pc, #164]	; (8000338 <set_sysclk_to_168+0xac>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a28      	ldr	r2, [pc, #160]	; (8000338 <set_sysclk_to_168+0xac>)
 8000296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800029a:	6013      	str	r3, [r2, #0]
	/* Wait till HSE is ready (CR: bit 17) */
	while(!(RCC->CR & (1 << 17)));
 800029c:	bf00      	nop
 800029e:	4b26      	ldr	r3, [pc, #152]	; (8000338 <set_sysclk_to_168+0xac>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <set_sysclk_to_168+0x12>

	/* Enable power interface clock (APB1ENR:bit 28) */
	RCC->APB1ENR |= (1 << 28);
 80002aa:	4b23      	ldr	r3, [pc, #140]	; (8000338 <set_sysclk_to_168+0xac>)
 80002ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ae:	4a22      	ldr	r2, [pc, #136]	; (8000338 <set_sysclk_to_168+0xac>)
 80002b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b4:	6413      	str	r3, [r2, #64]	; 0x40

	/* set voltage scale to 1 for max frequency (PWR_CR:bit 14)
	 * (0b0) scale 2 for fCLK <= 144 Mhz
	 * (0b1) scale 1 for 144 Mhz < fCLK <= 168 Mhz
	 */
	PWR->CR |= (1 << 14);
 80002b6:	4b21      	ldr	r3, [pc, #132]	; (800033c <set_sysclk_to_168+0xb0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a20      	ldr	r2, [pc, #128]	; (800033c <set_sysclk_to_168+0xb0>)
 80002bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c0:	6013      	str	r3, [r2, #0]

	/* set AHB prescaler to /1 (CFGR:bits 7:4) */
	RCC->CFGR |= (0 << 4);
 80002c2:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <set_sysclk_to_168+0xac>)
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <set_sysclk_to_168+0xac>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	6093      	str	r3, [r2, #8]
	/* set APB low speed prescaler to /4 (APB1) (CFGR:bits 12:10) */
	RCC->CFGR |= (5 << 10);
 80002ca:	4b1b      	ldr	r3, [pc, #108]	; (8000338 <set_sysclk_to_168+0xac>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a1a      	ldr	r2, [pc, #104]	; (8000338 <set_sysclk_to_168+0xac>)
 80002d0:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002d4:	6093      	str	r3, [r2, #8]
	/* set APB high speed prescaler to /2 (APB2) (CFGR:bits 15:13) */
	RCC->CFGR |= (4 << 13);
 80002d6:	4b18      	ldr	r3, [pc, #96]	; (8000338 <set_sysclk_to_168+0xac>)
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	4a17      	ldr	r2, [pc, #92]	; (8000338 <set_sysclk_to_168+0xac>)
 80002dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002e0:	6093      	str	r3, [r2, #8]

	/* Set M, N, P and Q PLL dividers
	 * PLLCFGR: bits 5:0 (M), 14:6 (N), 17:16 (P), 27:24 (Q)
	 * Set PLL source to HSE, PLLCFGR: bit 22, 1:HSE, 0:HSI
	 */
	RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002e2:	4b15      	ldr	r3, [pc, #84]	; (8000338 <set_sysclk_to_168+0xac>)
 80002e4:	4a16      	ldr	r2, [pc, #88]	; (8000340 <set_sysclk_to_168+0xb4>)
 80002e6:	605a      	str	r2, [r3, #4]
				   (PLL_Q << 24) | (1 << 22);
	/* Enable the main PLL (CR: bit 24) */
	RCC->CR |= (1 << 24);
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <set_sysclk_to_168+0xac>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a12      	ldr	r2, [pc, #72]	; (8000338 <set_sysclk_to_168+0xac>)
 80002ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002f2:	6013      	str	r3, [r2, #0]
	/* Wait till the main PLL is ready (CR: bit 25) */
	while(!(RCC->CR & (1 << 25)));
 80002f4:	bf00      	nop
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <set_sysclk_to_168+0xac>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f9      	beq.n	80002f6 <set_sysclk_to_168+0x6a>
	 * instruction cache enable (ACR:bit 9)
	 * data cache enable (ACR:bit 10)
	 * set latency to 5 wait states (ARC:bits 2:0)
	 *   see Table 10 on page 80 in RM0090
	 */
	FLASH->ACR = (1 << 8) | (1 << 9) | (1 << 10 ) | (5 << 0);
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <set_sysclk_to_168+0xb8>)
 8000304:	f240 7205 	movw	r2, #1797	; 0x705
 8000308:	601a      	str	r2, [r3, #0]
	/* Select the main PLL as system clock source, (CFGR:bits 1:0)
	 * 0b00 - HSI
	 * 0b01 - HSE
	 * 0b10 - PLL
	 */
	RCC->CFGR &= ~(3U << 0);
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <set_sysclk_to_168+0xac>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <set_sysclk_to_168+0xac>)
 8000310:	f023 0303 	bic.w	r3, r3, #3
 8000314:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (2 << 0);
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <set_sysclk_to_168+0xac>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	4a07      	ldr	r2, [pc, #28]	; (8000338 <set_sysclk_to_168+0xac>)
 800031c:	f043 0302 	orr.w	r3, r3, #2
 8000320:	6093      	str	r3, [r2, #8]
	/* Wait till the main PLL is used as system clock source (CFGR:bits 3:2) */
	while (!(RCC->CFGR & (2U << 2)));
 8000322:	bf00      	nop
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <set_sysclk_to_168+0xac>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f003 0308 	and.w	r3, r3, #8
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <set_sysclk_to_168+0x98>
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	40023800 	.word	0x40023800
 800033c:	40007000 	.word	0x40007000
 8000340:	07405408 	.word	0x07405408
 8000344:	40023c00 	.word	0x40023c00

08000348 <SysTick_Handler>:

/*************************************************
* default interrupt handler
*************************************************/
void SysTick_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
    if (tDelay != 0x00)
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <SysTick_Handler+0x20>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d004      	beq.n	800035e <SysTick_Handler+0x16>
    {
        tDelay--;
 8000354:	4b04      	ldr	r3, [pc, #16]	; (8000368 <SysTick_Handler+0x20>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a03      	ldr	r2, [pc, #12]	; (8000368 <SysTick_Handler+0x20>)
 800035c:	6013      	str	r3, [r2, #0]
    }
}
 800035e:	bf00      	nop
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	2000001c 	.word	0x2000001c

0800036c <init_systick>:

/*************************************************
* initialize SysTick
*************************************************/
void init_systick(uint32_t s, uint8_t cen)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]
    // Clear CTRL register
    SysTick->CTRL = 0x00000;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <init_systick+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
    // Main clock source is running with HSI by default which is at 8 Mhz.
    // SysTick clock source can be set with CTRL register (Bit 2)
    // 0: Processor clock/8 (AHB/8)
    // 1: Processor clock (AHB)
    SysTick->CTRL |= (0 << 2);
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <init_systick+0x4c>)
 8000380:	4a0d      	ldr	r2, [pc, #52]	; (80003b8 <init_systick+0x4c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	6013      	str	r3, [r2, #0]
    // Enable callback (bit 1)
    SysTick->CTRL |= ((uint32_t)cen << 1);
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <init_systick+0x4c>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	78fb      	ldrb	r3, [r7, #3]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	490a      	ldr	r1, [pc, #40]	; (80003b8 <init_systick+0x4c>)
 8000390:	4313      	orrs	r3, r2
 8000392:	600b      	str	r3, [r1, #0]
    // Load the value
    SysTick->LOAD = s;
 8000394:	4a08      	ldr	r2, [pc, #32]	; (80003b8 <init_systick+0x4c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	6053      	str	r3, [r2, #4]
    // Set the current value to 0
    SysTick->VAL = 0;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <init_systick+0x4c>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
    // Enable SysTick (bit 0)
    SysTick->CTRL |= (1 << 0);
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <init_systick+0x4c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <init_systick+0x4c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	e000e010 	.word	0xe000e010

080003bc <main>:

/*************************************************
* main code starts from here
*************************************************/
int main(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
    /* set system clock to 168 Mhz */
    set_sysclk_to_168();
 80003c0:	f7ff ff64 	bl	800028c <set_sysclk_to_168>
    // configure SysTick to interrupt every 21k ticks
    // when SysClk is configured to 168MHz,
    // SysTick will be running at 168Mhz/8 = 21Mhz speed
    // passing 21000 here will give us 1ms ticks
    // enable callback
    init_systick(21000, 1);
 80003c4:	2101      	movs	r1, #1
 80003c6:	f245 2008 	movw	r0, #21000	; 0x5208
 80003ca:	f7ff ffcf 	bl	800036c <init_systick>

    // Each module is powered separately. In order to turn on a module
    // we need to enable the relevant clock.
    // Set Bit 3 to enable GPIOD clock in AHB1ENR
    // AHB1ENR: XXXX XXXX XXXX XXXX XXXX XXXX XXXX 1XXX
    RCC->AHB1ENR |= 0x00000008;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <main+0x58>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <main+0x58>)
 80003d4:	f043 0308 	orr.w	r3, r3, #8
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
    // We first need to AND it to reset them, then OR it to set them.
    //                     bit31                                         bit0
    // MODER register bits : 01 01 01 01 XX XX XX XX XX XX XX XX XX XX XX XX
    //                      p15                                           p0

    GPIOD->MODER &= 0x00FFFFFF;   // Reset bits 31-24 to clear old values
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <main+0x5c>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <main+0x5c>)
 80003e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003e4:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= 0x55000000;   // Set MODER bits to 01 (0101 is 5 in hex)
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <main+0x5c>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <main+0x5c>)
 80003ec:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80003f0:	6013      	str	r3, [r2, #0]
    // GPIOD->MODER &= ~(0xFF << 24); //or GPIOD->MODER &= ~(0b11111111 << 24);
    // GPIOD->MODER |=  (0x55 << 24); //or GPIOD->MODER |=  (0b01010101 << 24);

    // Set Pins 12-15 to 1 to turn on all LEDs
    // ODR: 1111 XXXX XXXX XXXX
    GPIOD->ODR |= 0xF000;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <main+0x5c>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a08      	ldr	r2, [pc, #32]	; (8000418 <main+0x5c>)
 80003f8:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80003fc:	6153      	str	r3, [r2, #20]
    // You can do the same setup with shifting
    // GPIOD->ODR |= (0xF << 12);

    while(1)
    {
        delay_ms(1000);
 80003fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000402:	f000 f80b 	bl	800041c <delay_ms>
        GPIOD->ODR ^= 0xF000;  // Toggle LEDs
 8000406:	4b04      	ldr	r3, [pc, #16]	; (8000418 <main+0x5c>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a03      	ldr	r2, [pc, #12]	; (8000418 <main+0x5c>)
 800040c:	f483 4370 	eor.w	r3, r3, #61440	; 0xf000
 8000410:	6153      	str	r3, [r2, #20]
        delay_ms(1000);
 8000412:	e7f4      	b.n	80003fe <main+0x42>
 8000414:	40023800 	.word	0x40023800
 8000418:	40020c00 	.word	0x40020c00

0800041c <delay_ms>:
 * Millisecond delay function.
 *   volatile keyword is used so that compiler does not optimize it away
 * Polling method (If interrupt is not enabled)
 */
void delay_ms(volatile uint32_t s)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    tDelay = s;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a06      	ldr	r2, [pc, #24]	; (8000440 <delay_ms+0x24>)
 8000428:	6013      	str	r3, [r2, #0]
    while(tDelay != 0);
 800042a:	bf00      	nop
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <delay_ms+0x24>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d1fb      	bne.n	800042c <delay_ms+0x10>
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	2000001c 	.word	0x2000001c

08000444 <__libc_init_array>:
 8000444:	b570      	push	{r4, r5, r6, lr}
 8000446:	4e0d      	ldr	r6, [pc, #52]	; (800047c <__libc_init_array+0x38>)
 8000448:	4c0d      	ldr	r4, [pc, #52]	; (8000480 <__libc_init_array+0x3c>)
 800044a:	1ba4      	subs	r4, r4, r6
 800044c:	10a4      	asrs	r4, r4, #2
 800044e:	2500      	movs	r5, #0
 8000450:	42a5      	cmp	r5, r4
 8000452:	d109      	bne.n	8000468 <__libc_init_array+0x24>
 8000454:	4e0b      	ldr	r6, [pc, #44]	; (8000484 <__libc_init_array+0x40>)
 8000456:	4c0c      	ldr	r4, [pc, #48]	; (8000488 <__libc_init_array+0x44>)
 8000458:	f000 f818 	bl	800048c <_init>
 800045c:	1ba4      	subs	r4, r4, r6
 800045e:	10a4      	asrs	r4, r4, #2
 8000460:	2500      	movs	r5, #0
 8000462:	42a5      	cmp	r5, r4
 8000464:	d105      	bne.n	8000472 <__libc_init_array+0x2e>
 8000466:	bd70      	pop	{r4, r5, r6, pc}
 8000468:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800046c:	4798      	blx	r3
 800046e:	3501      	adds	r5, #1
 8000470:	e7ee      	b.n	8000450 <__libc_init_array+0xc>
 8000472:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000476:	4798      	blx	r3
 8000478:	3501      	adds	r5, #1
 800047a:	e7f2      	b.n	8000462 <__libc_init_array+0x1e>
 800047c:	080004a4 	.word	0x080004a4
 8000480:	080004a4 	.word	0x080004a4
 8000484:	080004a4 	.word	0x080004a4
 8000488:	080004a8 	.word	0x080004a8

0800048c <_init>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	bf00      	nop
 8000490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000492:	bc08      	pop	{r3}
 8000494:	469e      	mov	lr, r3
 8000496:	4770      	bx	lr

08000498 <_fini>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr
